{
  "address": "0x8A5580d7154F9abb01836655b8594f94719b265C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress_",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "sharedDecimals_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "lzEndpoint_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracle_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sweepAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "CallOFTReceivedSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "DropFailedMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "innerToken",
          "type": "address"
        }
      ],
      "name": "InnerTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "NonContractAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxLimit",
          "type": "uint256"
        }
      ],
      "name": "SetMaxDailyLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxLimit",
          "type": "uint256"
        }
      ],
      "name": "SetMaxDailyReceiveLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxLimit",
          "type": "uint256"
        }
      ],
      "name": "SetMaxSingleReceiveTransactionLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxLimit",
          "type": "uint256"
        }
      ],
      "name": "SetMaxSingleTransactionLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelist",
          "type": "bool"
        }
      ],
      "name": "SetWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sweepAmount",
          "type": "uint256"
        }
      ],
      "name": "SweepToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "TrustedRemoteRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "UpdateSendAndCallEnabled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PAYLOAD_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NO_EXTRA_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_SEND",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_SEND_AND_CALL",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_from",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gasForCall",
          "type": "uint256"
        }
      ],
      "name": "callOnOFTReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainIdToLast24HourReceiveWindowStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainIdToLast24HourReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainIdToLast24HourTransferred",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainIdToLast24HourWindowStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainIdToMaxDailyLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainIdToMaxDailyReceiveLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainIdToMaxSingleReceiveTransactionLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainIdToMaxSingleTransactionLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "creditedPackets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "srcAddress_",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "nonce_",
          "type": "uint64"
        }
      ],
      "name": "dropFailedMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_dstGasForCall",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendAndCallFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dstChainId_",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "isEligibleToSend",
      "outputs": [
        {
          "internalType": "bool",
          "name": "eligibleToSend",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maxSingleTransactionLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDailyLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transferredInWindow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "last24HourWindowStart",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isWhiteListedUser",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ResilientOracleInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "payloadSizeLimitLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "remoteChainId_",
          "type": "uint16"
        }
      ],
      "name": "removeTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dstChainId_",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "toAddress_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload_",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "dstGasForCall_",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "callparams_",
          "type": "tuple"
        }
      ],
      "name": "sendAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendAndCallEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        }
      ],
      "name": "sendFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId_",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        }
      ],
      "name": "setMaxDailyLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId_",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        }
      ],
      "name": "setMaxDailyReceiveLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId_",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        }
      ],
      "name": "setMaxSingleReceiveTransactionLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId_",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        }
      ],
      "name": "setMaxSingleTransactionLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracleAddress_",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setPayloadSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "val_",
          "type": "bool"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweepToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled_",
          "type": "bool"
        }
      ],
      "name": "updateSendAndCallEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd869f101af2cabc5dea707d49d25380f2e44a9c0988d31d2c9c8662e57151aec",
  "receipt": {
    "to": null,
    "from": "0x638Eb8DFfF094Fd1d52c5A198b44984806C521E5",
    "contractAddress": "0x8A5580d7154F9abb01836655b8594f94719b265C",
    "transactionIndex": 1,
    "gasUsed": "5402923",
    "logsBloom": "0x
    "blockHash": "0xc9c8255102fae4cb8d12714da1ce03075589b611e50e66ba942e21e005af76b7",
    "transactionHash": "0xd869f101af2cabc5dea707d49d25380f2e44a9c0988d31d2c9c8662e57151aec",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27104908,
        "transactionHash": "0xd869f101af2cabc5dea707d49d25380f2e44a9c0988d31d2c9c8662e57151aec",
        "address": "0x8A5580d7154F9abb01836655b8594f94719b265C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000638eb8dfff094fd1d52c5a198b44984806c521e5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc9c8255102fae4cb8d12714da1ce03075589b611e50e66ba942e21e005af76b7"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27104908,
        "transactionHash": "0xd869f101af2cabc5dea707d49d25380f2e44a9c0988d31d2c9c8662e57151aec",
        "address": "0x8A5580d7154F9abb01836655b8594f94719b265C",
        "topics": [
          "0x0b673f021ff9a27bbe58f282908695869e130b3103029190387b83650806c2c3",
          "0x0000000000000000000000008f377098e488d227e809bd56d30c9fd8388245d3"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc9c8255102fae4cb8d12714da1ce03075589b611e50e66ba942e21e005af76b7"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27104908,
        "transactionHash": "0xd869f101af2cabc5dea707d49d25380f2e44a9c0988d31d2c9c8662e57151aec",
        "address": "0x8A5580d7154F9abb01836655b8594f94719b265C",
        "topics": [
          "0x05cd89403c6bdeac21c2ff33de395121a31fa1bc2bf3adf4825f1f86e79969dd",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006708bad042916b47311c8078b29d7f432342102f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xc9c8255102fae4cb8d12714da1ce03075589b611e50e66ba942e21e005af76b7"
      }
    ],
    "blockNumber": 27104908,
    "cumulativeGasUsed": "5402923",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8f377098e488D227e809BD56D30C9Fd8388245D3",
    8,
    "0x6098e96a28E02f27B1e6BD381f870F1C8Bd169d3",
    "0x6708bAd042916B47311c8078b29d7f432342102F"
  ],
  "numDeployments": 1,
  "solcInputHash": "f2046c3ab03975d1be43bca1cf657398",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"sharedDecimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"lzEndpoint_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"CallOFTReceivedSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"DropFailedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"innerToken\",\"type\":\"address\"}],\"name\":\"InnerTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NonContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxLimit\",\"type\":\"uint256\"}],\"name\":\"SetMaxDailyLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxLimit\",\"type\":\"uint256\"}],\"name\":\"SetMaxDailyReceiveLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxLimit\",\"type\":\"uint256\"}],\"name\":\"SetMaxSingleReceiveTransactionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxLimit\",\"type\":\"uint256\"}],\"name\":\"SetMaxSingleTransactionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelist\",\"type\":\"bool\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"SweepToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"TrustedRemoteRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UpdateSendAndCallEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_EXTRA_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_SEND\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_SEND_AND_CALL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_from\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasForCall\",\"type\":\"uint256\"}],\"name\":\"callOnOFTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToLast24HourReceiveWindowStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToLast24HourReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToLast24HourTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToLast24HourWindowStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToMaxDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToMaxDailyReceiveLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToMaxSingleReceiveTransactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToMaxSingleTransactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"creditedPackets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce_\",\"type\":\"uint64\"}],\"name\":\"dropFailedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_dstGasForCall\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendAndCallFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"isEligibleToSend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligibleToSend\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxSingleTransactionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDailyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferredInWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last24HourWindowStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWhiteListedUser\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ResilientOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"remoteChainId_\",\"type\":\"uint16\"}],\"name\":\"removeTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"toAddress_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"dstGasForCall_\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"callparams_\",\"type\":\"tuple\"}],\"name\":\"sendAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendAndCallEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"}],\"name\":\"sendFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"setMaxDailyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"setMaxDailyReceiveLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"setMaxSingleReceiveTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"setMaxSingleTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress_\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val_\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled_\",\"type\":\"bool\"}],\"name\":\"updateSendAndCallEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"kind\":\"dev\",\"methods\":{\"circulatingSupply()\":{\"returns\":{\"_0\":\"total circulating supply of the token on the destination chain.\"}},\"dropFailedMessage(uint16,bytes,uint64)\":{\"custom:access\":\"Only owner\",\"custom:event\":\"Emits DropFailedMessage on clearance of failed message.\",\"params\":{\"nonce_\":\"Nonce_ of the transaction\",\"srcAddress_\":\"Address of source followed by current bridge address\",\"srcChainId_\":\"Chain id of source\"}},\"estimateSendFee(uint16,bytes32,uint256,bool,bytes)\":{\"details\":\"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _amount - amount of the tokens to transfer _useZro - indicates to use zro to pay L0 fees _adapterParam - flexible bytes array to indicate messaging adapter services in L0\"},\"isEligibleToSend(address,uint16,uint256)\":{\"details\":\"This external view function assesses whether the specified sender is eligible to transfer the given amount      to the specified destination chain. It considers factors such as whitelisting, transaction limits, and a 24-hour window.\",\"params\":{\"amount_\":\"The quantity of tokens to be transferred.\",\"dstChainId_\":\"Indicates destination chain.\",\"from_\":\"The sender's address initiating the transfer.\"},\"returns\":{\"amountInUsd\":\"The equivalent amount in USD based on the oracle price.\",\"eligibleToSend\":\"A boolean indicating whether the sender is eligible to transfer the tokens.\",\"isWhiteListedUser\":\"A boolean indicating whether the sender is whitelisted.\",\"last24HourWindowStart\":\"The timestamp when the current 24-hour window started.\",\"maxDailyLimit\":\"The maximum daily limit for transactions.\",\"maxSingleTransactionLimit\":\"The maximum limit for a single transaction.\",\"transferredInWindow\":\"The total amount transferred in the current 24-hour window.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"custom:access\":\"Only owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeTrustedRemote(uint16)\":{\"custom:access\":\"Only owner.\",\"custom:event\":\"Emits TrustedRemoteRemoved once chain id is removed from trusted remote.\",\"params\":{\"remoteChainId_\":\"The chain's id corresponds to setting the trusted remote to empty.\"}},\"sendAndCall(address,uint16,bytes32,uint256,bytes,uint64,(address,address,bytes))\":{\"details\":\"This internal override function enables the contract to send tokens and invoke calls on the specified      destination chain. It checks whether the sendAndCall feature is enabled before proceeding with the transfer.\",\"params\":{\"amount_\":\"Amount of tokens that will be transferred.\",\"callparams_\":\"Additional parameters, including refund address, ZRO payment address,                   and adapter params.\",\"dstChainId_\":\"Destination chain id on which tokens will be send.\",\"dstGasForCall_\":\"The amount of gas allocated for the call on the destination chain.\",\"from_\":\"Address from which tokens will be debited.\",\"payload_\":\"Additional data payload for the call on the destination chain.\",\"toAddress_\":\"Address on which tokens will be credited on destination chain.\"}},\"sendFrom(address,uint16,bytes32,uint256,(address,address,bytes))\":{\"details\":\"send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from` `_from` the owner of token `_dstChainId` the destination chain identifier `_toAddress` can be any size depending on the `dstChainId`. `_amount` the quantity of tokens in wei `_refundAddress` the address LayerZero refunds if too much message fee is sent `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services\"},\"setMaxDailyLimit(uint16,uint256)\":{\"custom:access\":\"Only owner.\",\"custom:event\":\"Emits setMaxDailyLimit with old and new limit associated with chain id.\",\"params\":{\"chainId_\":\"Destination chain id.\",\"limit_\":\"Amount in USD(scaled with 18 decimals).\"}},\"setMaxDailyReceiveLimit(uint16,uint256)\":{\"custom:access\":\"Only owner.\",\"custom:event\":\"Emits setMaxDailyReceiveLimit with old and new limit associated with chain id.\",\"params\":{\"chainId_\":\"The destination chain ID.\",\"limit_\":\"The new maximum daily limit in USD(scaled with 18 decimals).\"}},\"setMaxSingleReceiveTransactionLimit(uint16,uint256)\":{\"custom:access\":\"Only owner.\",\"custom:event\":\"Emits setMaxSingleReceiveTransactionLimit with old and new limit associated with chain id.\",\"params\":{\"chainId_\":\"The destination chain ID.\",\"limit_\":\"The new maximum limit in USD(scaled with 18 decimals).\"}},\"setMaxSingleTransactionLimit(uint16,uint256)\":{\"custom:access\":\"Only owner.\",\"custom:event\":\"Emits SetMaxSingleTransactionLimit with old and new limit associated with chain id.\",\"params\":{\"chainId_\":\"Destination chain id.\",\"limit_\":\"Amount in USD(scaled with 18 decimals).\"}},\"setOracle(address)\":{\"custom:access\":\"Only owner.\",\"custom:event\":\"Emits OracleChanged with old and new oracle address.\",\"details\":\"Reverts if the new address is zero.\",\"params\":{\"oracleAddress_\":\"The new address of the ResilientOracle contract.\"}},\"setWhitelist(address,bool)\":{\"custom:access\":\"Only owner.\",\"custom:event\":\"Emits setWhitelist.\",\"params\":{\"user_\":\"Address to be add in whitelist.\",\"val_\":\"Boolean to be set (true for user_ address is whitelisted).\"}},\"sweepToken(address,address,uint256)\":{\"custom:access\":\"Only Owner\",\"custom:error\":\"Throw InsufficientBalance if amount_ is greater than the available balance of the token in the contract\",\"custom:event\":\"Emits SweepToken event\",\"params\":{\"amount_\":\"The amount of tokens needs to transfer\",\"to_\":\"The address of the recipient\",\"token_\":\"The address of the ERC-20 token to sweep\"}},\"token()\":{\"returns\":{\"_0\":\"Address of the inner token of this bridge.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"custom:access\":\"Only owner.\"},\"updateSendAndCallEnabled(bool)\":{\"params\":{\"enabled_\":\"Boolean indicating whether the sendAndCall function should be enabled or disabled.\"}}},\"title\":\"XVSProxyOFTDest\",\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientBalance(uint256,uint256)\":[{\"notice\":\"Error thrown when this contract balance is less than sweep amount\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"events\":{\"DropFailedMessage(uint16,bytes,uint64)\":{\"notice\":\"Emits when stored message dropped without successful retrying.\"},\"InnerTokenAdded(address)\":{\"notice\":\"Event emitted when inner token set successfully.\"},\"OracleChanged(address,address)\":{\"notice\":\"Event emitted when oracle is modified.\"},\"SetMaxDailyLimit(uint16,uint256,uint256)\":{\"notice\":\"Emitted when the maximum daily limit of transactions from local chain is modified.\"},\"SetMaxDailyReceiveLimit(uint16,uint256,uint256)\":{\"notice\":\"Emitted when the maximum daily limit for receiving transactions from remote chain is modified.\"},\"SetMaxSingleReceiveTransactionLimit(uint16,uint256,uint256)\":{\"notice\":\"Emitted when the maximum limit for a single receive transaction from remote chain is modified.\"},\"SetMaxSingleTransactionLimit(uint16,uint256,uint256)\":{\"notice\":\"Emitted when the maximum limit for a single transaction from local chain is modified.\"},\"SetWhitelist(address,bool)\":{\"notice\":\"Emitted when address is added to whitelist.\"},\"SweepToken(address,address,uint256)\":{\"notice\":\"Emitted on sweep token success\"},\"TrustedRemoteRemoved(uint16)\":{\"notice\":\"Event emitted when trusted remote sets to empty.\"},\"UpdateSendAndCallEnabled(bool)\":{\"notice\":\"Event emitted when SendAndCallEnabled updated successfully.\"}},\"kind\":\"user\",\"methods\":{\"chainIdToLast24HourReceiveWindowStart(uint16)\":{\"notice\":\"Timestamp when the last 24-hour window started from remote chain.\"},\"chainIdToLast24HourReceived(uint16)\":{\"notice\":\"Total received amount in USD(scaled with 18 decimals) within the last 24-hour window from remote chain.\"},\"chainIdToLast24HourTransferred(uint16)\":{\"notice\":\"Total sent amount in USD(scaled with 18 decimals) within the last 24-hour window from local chain.\"},\"chainIdToLast24HourWindowStart(uint16)\":{\"notice\":\"Timestamp when the last 24-hour window started from local chain.\"},\"chainIdToMaxDailyLimit(uint16)\":{\"notice\":\"Maximum daily limit for transactions in USD(scaled with 18 decimals) from local chain.\"},\"chainIdToMaxDailyReceiveLimit(uint16)\":{\"notice\":\"Maximum daily limit for receiving transactions in USD(scaled with 18 decimals) from remote chain.\"},\"chainIdToMaxSingleReceiveTransactionLimit(uint16)\":{\"notice\":\"Maximum limit for a single receive transaction in USD(scaled with 18 decimals) from remote chain.\"},\"chainIdToMaxSingleTransactionLimit(uint16)\":{\"notice\":\"Maximum limit for a single transaction in USD(scaled with 18 decimals) from local chain.\"},\"circulatingSupply()\":{\"notice\":\"Returns the total circulating supply of the token on the destination chain i.e (total supply).\"},\"dropFailedMessage(uint16,bytes,uint64)\":{\"notice\":\"Clear failed messages from the storage.\"},\"isEligibleToSend(address,uint16,uint256)\":{\"notice\":\"Checks the eligibility of a sender to initiate a cross-chain token transfer.\"},\"oracle()\":{\"notice\":\"The address of ResilientOracle contract wrapped in its interface.\"},\"pause()\":{\"notice\":\"Triggers stopped state of the bridge.\"},\"removeTrustedRemote(uint16)\":{\"notice\":\"Remove trusted remote from storage.\"},\"renounceOwnership()\":{\"notice\":\"Empty implementation of renounce ownership to avoid any mishappening.\"},\"sendAndCall(address,uint16,bytes32,uint256,bytes,uint64,(address,address,bytes))\":{\"notice\":\"Initiates a cross-chain token transfer and triggers a call on the destination chain.\"},\"setMaxDailyLimit(uint16,uint256)\":{\"notice\":\"Sets the limit of daily (24 Hour) transactions amount.\"},\"setMaxDailyReceiveLimit(uint16,uint256)\":{\"notice\":\"Sets the maximum daily limit for receiving transactions.\"},\"setMaxSingleReceiveTransactionLimit(uint16,uint256)\":{\"notice\":\"Sets the maximum limit for a single receive transaction.\"},\"setMaxSingleTransactionLimit(uint16,uint256)\":{\"notice\":\"Sets the limit of single transaction amount.\"},\"setOracle(address)\":{\"notice\":\"Set the address of the ResilientOracle contract.\"},\"setWhitelist(address,bool)\":{\"notice\":\"Sets the whitelist address to skip checks on transaction limit.\"},\"sweepToken(address,address,uint256)\":{\"notice\":\"A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to user\"},\"token()\":{\"notice\":\"Return's the address of the inner token of this bridge.\"},\"unpause()\":{\"notice\":\"Triggers resume state of the bridge.\"},\"updateSendAndCallEnabled(bool)\":{\"notice\":\"It enables or disables sendAndCall functionality for the bridge.\"},\"whitelist(address)\":{\"notice\":\"Address on which cap check and bound limit is not applicable.\"}},\"notice\":\"XVSProxyOFTDest contract builds upon the functionality of its parent contract, BaseXVSProxyOFT, and focuses on managing token transfers to the destination chain. It provides functions to check eligibility and perform the actual token transfers while maintaining strict access controls and pausing mechanisms.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge/XVSProxyOFTDest.sol\":\"XVSProxyOFTDest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint _start,\\n        uint _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x7e64cccdf22a03f513d94960f2145dd801fb5ec88d971de079b5186a9f5e93c4\",\"license\":\"Unlicense\"},\"@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                0, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n                _gas, // gas\\n                _target, // recipient\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\n        require(_buf.length >= 4);\\n        uint _mask = LOW_28_MASK;\\n        assembly {\\n            // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n            // mask out the top 4 bytes\\n            // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4e52af409b5ec80432292d86fb01906785eb78ac31da3bab4565aabcd6e3e56\",\"license\":\"MIT OR Apache-2.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../libraries/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(\\n            _srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote),\\n            \\\"LzApp: invalid source sending contract\\\"\\n        );\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint _nativeFee\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(\\n        uint16 _dstChainId,\\n        uint16 _type,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit + _extraGas, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) {\\n            // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint _configType\\n    ) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = _path;\\n        emit SetTrustedRemote(_remoteChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(\\n        uint16 _dstChainId,\\n        uint16 _packetType,\\n        uint _minGas\\n    ) external onlyOwner {\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x309c994bdcf69ad63c6789694a28eb72a773e2d9db58fe572ab2b34a475972ce\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../libraries/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\n            gasleft(),\\n            150,\\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\\n        );\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload,\\n        bytes memory _reason\\n    ) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x612ff1f2a158b7e64e873885b5ff08afa348998fd9005f384d555d643ba7968d\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xab7fcacc672251c850f00c0abd4100df9afcc4ad70b8d331a2fd4cb07acab9f4\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xac1966c1229bd4dc36b6c69eeb94a537bd9aa2198d7623b9ba7f8f7dbe79bb4c\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xb4df93aeb0fb46373a4fb728ad2603edc8b9a1577eee8d801768dc115bf96498\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/BaseOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OFTCoreV2.sol\\\";\\nimport \\\"./interfaces/IOFTV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract BaseOFTV2 is OFTCoreV2, ERC165, IOFTV2 {\\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) OFTCoreV2(_sharedDecimals, _lzEndpoint) {}\\n\\n    /************************************************************************\\n     * public functions\\n     ************************************************************************/\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        LzCallParams calldata _callParams\\n    ) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n    }\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        LzCallParams calldata _callParams\\n    ) public payable virtual override {\\n        _sendAndCall(\\n            _from,\\n            _dstChainId,\\n            _toAddress,\\n            _amount,\\n            _payload,\\n            _dstGasForCall,\\n            _callParams.refundAddress,\\n            _callParams.zroPaymentAddress,\\n            _callParams.adapterParams\\n        );\\n    }\\n\\n    /************************************************************************\\n     * public view functions\\n     ************************************************************************/\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTV2).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\\n    }\\n\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint);\\n\\n    function token() public view virtual override returns (address);\\n}\\n\",\"keccak256\":\"0x59d2d32dd14a4f58232b126a7d69608a85f82137bd56d8ce0fc28ff646cba943\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTCoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"../../../libraries/ExcessivelySafeCall.sol\\\";\\nimport \\\"./interfaces/ICommonOFT.sol\\\";\\nimport \\\"./interfaces/IOFTReceiverV2.sol\\\";\\n\\nabstract contract OFTCoreV2 is NonblockingLzApp {\\n    using BytesLib for bytes;\\n    using ExcessivelySafeCall for address;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint8 public constant PT_SEND = 0;\\n    uint8 public constant PT_SEND_AND_CALL = 1;\\n\\n    uint8 public immutable sharedDecimals;\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bool))) public creditedPackets;\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes32 indexed _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event NonContractAddress(address _address);\\n\\n    // _sharedDecimals should be the minimum decimals on all chains\\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\\n        sharedDecimals = _sharedDecimals;\\n    }\\n\\n    /************************************************************************\\n     * public functions\\n     ************************************************************************/\\n    function callOnOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes32 _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint _gasForCall\\n    ) public virtual {\\n        require(_msgSender() == address(this), \\\"OFTCore: caller must be OFTCore\\\");\\n\\n        // send\\n        _amount = _transferFrom(address(this), _to, _amount);\\n        emit ReceiveFromChain(_srcChainId, _to, _amount);\\n\\n        // call\\n        IOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\\n    }\\n\\n    /************************************************************************\\n     * internal functions\\n     ************************************************************************/\\n    function _estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes memory _adapterParams\\n    ) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = _encodeSendPayload(_toAddress, _ld2sd(_amount));\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes memory _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes memory _adapterParams\\n    ) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendAndCall()\\n        bytes memory payload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(_amount), _payload, _dstGasForCall);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        uint8 packetType = _payload.toUint8(0);\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else if (packetType == PT_SEND_AND_CALL) {\\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal virtual returns (uint amount) {\\n        _checkGasLimit(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        (amount, ) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount); // amount returned should not have dust\\n        require(amount > 0, \\\"OFTCore: amount too small\\\");\\n\\n        bytes memory lzPayload = _encodeSendPayload(_toAddress, _ld2sd(amount));\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(\\n        uint16 _srcChainId,\\n        bytes memory,\\n        uint64,\\n        bytes memory _payload\\n    ) internal virtual {\\n        (address to, uint64 amountSD) = _decodeSendPayload(_payload);\\n        if (to == address(0)) {\\n            to = address(0xdead);\\n        }\\n\\n        uint amount = _sd2ld(amountSD);\\n        amount = _creditTo(_srcChainId, to, amount);\\n\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes memory _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal virtual returns (uint amount) {\\n        _checkGasLimit(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\\n\\n        (amount, ) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\\n        require(amount > 0, \\\"OFTCore: amount too small\\\");\\n\\n        // encode the msg.sender into the payload instead of _from\\n        bytes memory lzPayload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(amount), _payload, _dstGasForCall);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAndCallAck(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual {\\n        (bytes32 from, address to, uint64 amountSD, bytes memory payloadForCall, uint64 gasForCall) = _decodeSendAndCallPayload(_payload);\\n\\n        bool credited = creditedPackets[_srcChainId][_srcAddress][_nonce];\\n        uint amount = _sd2ld(amountSD);\\n\\n        // credit to this contract first, and then transfer to receiver only if callOnOFTReceived() succeeds\\n        if (!credited) {\\n            amount = _creditTo(_srcChainId, address(this), amount);\\n            creditedPackets[_srcChainId][_srcAddress][_nonce] = true;\\n        }\\n\\n        if (!_isContract(to)) {\\n            emit NonContractAddress(to);\\n            return;\\n        }\\n\\n        // workaround for stack too deep\\n        uint16 srcChainId = _srcChainId;\\n        bytes memory srcAddress = _srcAddress;\\n        uint64 nonce = _nonce;\\n        bytes memory payload = _payload;\\n        bytes32 from_ = from;\\n        address to_ = to;\\n        uint amount_ = amount;\\n        bytes memory payloadForCall_ = payloadForCall;\\n\\n        // no gas limit for the call if retry\\n        uint gas = credited ? gasleft() : gasForCall;\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\n            gasleft(),\\n            150,\\n            abi.encodeWithSelector(this.callOnOFTReceived.selector, srcChainId, srcAddress, nonce, from_, to_, amount_, payloadForCall_, gas)\\n        );\\n\\n        if (success) {\\n            bytes32 hash = keccak256(payload);\\n            emit CallOFTReceivedSuccess(srcChainId, srcAddress, nonce, hash);\\n        } else {\\n            // store the failed message into the nonblockingLzApp\\n            _storeFailedMessage(srcChainId, srcAddress, nonce, payload, reason);\\n        }\\n    }\\n\\n    function _isContract(address _account) internal view returns (bool) {\\n        return _account.code.length > 0;\\n    }\\n\\n    function _ld2sd(uint _amount) internal view virtual returns (uint64) {\\n        uint amountSD = _amount / _ld2sdRate();\\n        require(amountSD <= type(uint64).max, \\\"OFTCore: amountSD overflow\\\");\\n        return uint64(amountSD);\\n    }\\n\\n    function _sd2ld(uint64 _amountSD) internal view virtual returns (uint) {\\n        return _amountSD * _ld2sdRate();\\n    }\\n\\n    function _removeDust(uint _amount) internal view virtual returns (uint amountAfter, uint dust) {\\n        dust = _amount % _ld2sdRate();\\n        amountAfter = _amount - dust;\\n    }\\n\\n    function _encodeSendPayload(bytes32 _toAddress, uint64 _amountSD) internal view virtual returns (bytes memory) {\\n        return abi.encodePacked(PT_SEND, _toAddress, _amountSD);\\n    }\\n\\n    function _decodeSendPayload(bytes memory _payload) internal view virtual returns (address to, uint64 amountSD) {\\n        require(_payload.toUint8(0) == PT_SEND && _payload.length == 41, \\\"OFTCore: invalid payload\\\");\\n\\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\\n        amountSD = _payload.toUint64(33);\\n    }\\n\\n    function _encodeSendAndCallPayload(\\n        address _from,\\n        bytes32 _toAddress,\\n        uint64 _amountSD,\\n        bytes memory _payload,\\n        uint64 _dstGasForCall\\n    ) internal view virtual returns (bytes memory) {\\n        return abi.encodePacked(PT_SEND_AND_CALL, _toAddress, _amountSD, _addressToBytes32(_from), _dstGasForCall, _payload);\\n    }\\n\\n    function _decodeSendAndCallPayload(bytes memory _payload)\\n        internal\\n        view\\n        virtual\\n        returns (\\n            bytes32 from,\\n            address to,\\n            uint64 amountSD,\\n            bytes memory payload,\\n            uint64 dstGasForCall\\n        )\\n    {\\n        require(_payload.toUint8(0) == PT_SEND_AND_CALL, \\\"OFTCore: invalid payload\\\");\\n\\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\\n        amountSD = _payload.toUint64(33);\\n        from = _payload.toBytes32(41);\\n        dstGasForCall = _payload.toUint64(73);\\n        payload = _payload.slice(81, _payload.length - 81);\\n    }\\n\\n    function _addressToBytes32(address _address) internal pure virtual returns (bytes32) {\\n        return bytes32(uint(uint160(_address)));\\n    }\\n\\n    function _debitFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n\\n    function _creditTo(\\n        uint16 _srcChainId,\\n        address _toAddress,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n\\n    function _transferFrom(\\n        address _from,\\n        address _to,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n\\n    function _ld2sdRate() internal view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x96cf7a10c5af4243822d25e77985a4a46d12264f839593ded5378cd6519a8df0\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1d034ba786436c1fce8057352c87373098bd1d8026b24c8fbc7be28636d0c15d\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/IOFTReceiverV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverV2 {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xf57e437ced3bc10bb333123bb49475dab47c7615b86401c4d872c29ad4928fd5\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/IOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTV2 is ICommonOFT {\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\",\"keccak256\":\"0xb1d31f341715347d49db4e2c0de27c49bbd70b5b3d9b0adb1050b2b3a305ab87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x40031b19684ca0c912e794d08c2c0b0d8be77d3c1bdc937830a0658eff899650\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { EXP_SCALE as EXP_SCALE_, MANTISSA_ONE as MANTISSA_ONE_ } from \\\"./constants.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    struct Double {\\n        uint256 mantissa;\\n    }\\n\\n    uint256 internal constant EXP_SCALE = EXP_SCALE_;\\n    uint256 internal constant DOUBLE_SCALE = 1e36;\\n    uint256 internal constant HALF_EXP_SCALE = EXP_SCALE / 2;\\n    uint256 internal constant MANTISSA_ONE = MANTISSA_ONE_;\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * EXP_SCALE}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint256) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / EXP_SCALE;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint256 scalar, uint256 addend) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n <= type(uint224).max, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n <= type(uint32).max, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / EXP_SCALE });\\n    }\\n\\n    function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / EXP_SCALE;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b.mantissa) / DOUBLE_SCALE });\\n    }\\n\\n    function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / DOUBLE_SCALE;\\n    }\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(mul_(a.mantissa, EXP_SCALE), b.mantissa) });\\n    }\\n\\n    function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, EXP_SCALE), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a.mantissa, DOUBLE_SCALE), b.mantissa) });\\n    }\\n\\n    function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, DOUBLE_SCALE), b.mantissa);\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a, DOUBLE_SCALE), b) });\\n    }\\n}\\n\",\"keccak256\":\"0x6cf5430c2db151ab24ef0f567ed443c0b75b8b6051a62cacbe83f28b16834605\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/// @dev Base unit for computations, usually used in scaling (multiplications, divisions)\\nuint256 constant EXP_SCALE = 1e18;\\n\\n/// @dev A unit (literal one) in EXP_SCALE, usually used in additions/subtractions\\nuint256 constant MANTISSA_ONE = EXP_SCALE;\\n\",\"keccak256\":\"0x44de02d7837ee1d4dcf6e9f5e783e9d9e0bec0154f23f5661fb54810cff9f892\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0x909eb76841ebd57d8f53686b76b1a09da7bbbbcddb29510c41674d5aa84c713e\",\"license\":\"BSD-3-Clause\"},\"contracts/Bridge/BaseXVSProxyOFT.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { BaseOFTV2 } from \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/BaseOFTV2.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\nimport { ExponentialNoError } from \\\"@venusprotocol/solidity-utilities/contracts/ExponentialNoError.sol\\\";\\n\\n/**\\n * @title BaseXVSProxyOFT\\n * @author Venus\\n * @notice The BaseXVSProxyOFT contract is tailored for facilitating cross-chain transactions with an ERC20 token.\\n * It manages transaction limits of a single and daily transactions.\\n * This contract inherits key functionalities from other contracts, including pausing capabilities and error handling.\\n * It holds state variables for the inner token and maps for tracking transaction limits and statistics across various chains and addresses.\\n * The contract allows the owner to configure limits, set whitelists, and control pausing.\\n * Internal functions conduct eligibility check of transactions, making the contract a fundamental component for cross-chain token management.\\n */\\n\\nabstract contract BaseXVSProxyOFT is Pausable, ExponentialNoError, BaseOFTV2 {\\n    using SafeERC20 for IERC20;\\n    IERC20 internal immutable innerToken;\\n    uint256 internal immutable ld2sdRate;\\n    bool public sendAndCallEnabled;\\n\\n    /**\\n     * @notice The address of ResilientOracle contract wrapped in its interface.\\n     */\\n    ResilientOracleInterface public oracle;\\n    /**\\n     * @notice Maximum limit for a single transaction in USD(scaled with 18 decimals) from local chain.\\n     */\\n    mapping(uint16 => uint256) public chainIdToMaxSingleTransactionLimit;\\n    /**\\n     * @notice Maximum daily limit for transactions in USD(scaled with 18 decimals) from local chain.\\n     */\\n    mapping(uint16 => uint256) public chainIdToMaxDailyLimit;\\n    /**\\n     * @notice Total sent amount in USD(scaled with 18 decimals) within the last 24-hour window from local chain.\\n     */\\n    mapping(uint16 => uint256) public chainIdToLast24HourTransferred;\\n    /**\\n     * @notice Timestamp when the last 24-hour window started from local chain.\\n     */\\n    mapping(uint16 => uint256) public chainIdToLast24HourWindowStart;\\n    /**\\n     * @notice Maximum limit for a single receive transaction in USD(scaled with 18 decimals) from remote chain.\\n     */\\n    mapping(uint16 => uint256) public chainIdToMaxSingleReceiveTransactionLimit;\\n    /**\\n     * @notice Maximum daily limit for receiving transactions in USD(scaled with 18 decimals) from remote chain.\\n     */\\n    mapping(uint16 => uint256) public chainIdToMaxDailyReceiveLimit;\\n    /**\\n     * @notice Total received amount in USD(scaled with 18 decimals) within the last 24-hour window from remote chain.\\n     */\\n    mapping(uint16 => uint256) public chainIdToLast24HourReceived;\\n    /**\\n     * @notice Timestamp when the last 24-hour window started from remote chain.\\n     */\\n    mapping(uint16 => uint256) public chainIdToLast24HourReceiveWindowStart;\\n    /**\\n     * @notice Address on which cap check and bound limit is not applicable.\\n     */\\n    mapping(address => bool) public whitelist;\\n\\n    /**\\n     * @notice Emitted when address is added to whitelist.\\n     */\\n    event SetWhitelist(address indexed addr, bool isWhitelist);\\n    /**\\n     * @notice  Emitted when the maximum limit for a single transaction from local chain is modified.\\n     */\\n    event SetMaxSingleTransactionLimit(uint16 chainId, uint256 oldMaxLimit, uint256 newMaxLimit);\\n    /**\\n     * @notice Emitted when the maximum daily limit of transactions from local chain is modified.\\n     */\\n    event SetMaxDailyLimit(uint16 chainId, uint256 oldMaxLimit, uint256 newMaxLimit);\\n    /**\\n     * @notice Emitted when the maximum limit for a single receive transaction from remote chain is modified.\\n     */\\n    event SetMaxSingleReceiveTransactionLimit(uint16 chainId, uint256 oldMaxLimit, uint256 newMaxLimit);\\n    /**\\n     * @notice Emitted when the maximum daily limit for receiving transactions from remote chain is modified.\\n     */\\n    event SetMaxDailyReceiveLimit(uint16 chainId, uint256 oldMaxLimit, uint256 newMaxLimit);\\n    /**\\n     * @notice Event emitted when oracle is modified.\\n     */\\n    event OracleChanged(address indexed oldOracle, address indexed newOracle);\\n    /**\\n     * @notice Event emitted when trusted remote sets to empty.\\n     */\\n    event TrustedRemoteRemoved(uint16 chainId);\\n    /**\\n     * @notice Event emitted when inner token set successfully.\\n     */\\n    event InnerTokenAdded(address indexed innerToken);\\n    /**\\n     *@notice Emitted on sweep token success\\n     */\\n    event SweepToken(address indexed token, address indexed to, uint256 sweepAmount);\\n    /**\\n     * @notice Event emitted when SendAndCallEnabled updated successfully.\\n     */\\n    event UpdateSendAndCallEnabled(bool indexed enabled);\\n    /**\\n     *@notice Error thrown when this contract balance is less than sweep amount\\n     */\\n    error InsufficientBalance(uint256 sweepAmount, uint256 balance);\\n\\n    /**\\n     * @param tokenAddress_ Address of the inner token.\\n     * @param sharedDecimals_ Number of shared decimals.\\n     * @param lzEndpoint_ Address of the layer zero endpoint contract.\\n     * @param oracle_ Address of the price oracle.\\n     * @custom:error ZeroAddressNotAllowed is thrown when token contract address is zero.\\n     * @custom:error ZeroAddressNotAllowed is thrown when lzEndpoint contract address is zero.\\n     * @custom:error ZeroAddressNotAllowed is thrown when oracle contract address is zero.\\n     * @custom:event Emits InnerTokenAdded with token address.\\n     * @custom:event Emits OracleChanged with zero address and oracle address.\\n     */\\n    constructor(\\n        address tokenAddress_,\\n        uint8 sharedDecimals_,\\n        address lzEndpoint_,\\n        address oracle_\\n    ) BaseOFTV2(sharedDecimals_, lzEndpoint_) {\\n        ensureNonzeroAddress(tokenAddress_);\\n        ensureNonzeroAddress(lzEndpoint_);\\n        ensureNonzeroAddress(oracle_);\\n\\n        innerToken = IERC20(tokenAddress_);\\n\\n        (bool success, bytes memory data) = tokenAddress_.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        require(success, \\\"ProxyOFT: failed to get token decimals\\\");\\n        uint8 decimals = abi.decode(data, (uint8));\\n\\n        require(sharedDecimals_ <= decimals, \\\"ProxyOFT: sharedDecimals must be <= decimals\\\");\\n        ld2sdRate = 10 ** (decimals - sharedDecimals_);\\n\\n        emit InnerTokenAdded(tokenAddress_);\\n        emit OracleChanged(address(0), oracle_);\\n\\n        oracle = ResilientOracleInterface(oracle_);\\n    }\\n\\n    /**\\n     * @notice Set the address of the ResilientOracle contract.\\n     * @dev Reverts if the new address is zero.\\n     * @param oracleAddress_ The new address of the ResilientOracle contract.\\n     * @custom:access Only owner.\\n     * @custom:event Emits OracleChanged with old and new oracle address.\\n     */\\n    function setOracle(address oracleAddress_) external onlyOwner {\\n        ensureNonzeroAddress(oracleAddress_);\\n        emit OracleChanged(address(oracle), oracleAddress_);\\n        oracle = ResilientOracleInterface(oracleAddress_);\\n    }\\n\\n    /**\\n     * @notice Sets the limit of single transaction amount.\\n     * @param chainId_ Destination chain id.\\n     * @param limit_ Amount in USD(scaled with 18 decimals).\\n     * @custom:access Only owner.\\n     * @custom:event Emits SetMaxSingleTransactionLimit with old and new limit associated with chain id.\\n     */\\n    function setMaxSingleTransactionLimit(uint16 chainId_, uint256 limit_) external onlyOwner {\\n        require(limit_ <= chainIdToMaxDailyLimit[chainId_], \\\"Single transaction limit > Daily limit\\\");\\n        emit SetMaxSingleTransactionLimit(chainId_, chainIdToMaxSingleTransactionLimit[chainId_], limit_);\\n        chainIdToMaxSingleTransactionLimit[chainId_] = limit_;\\n    }\\n\\n    /**\\n     * @notice Sets the limit of daily (24 Hour) transactions amount.\\n     * @param chainId_ Destination chain id.\\n     * @param limit_ Amount in USD(scaled with 18 decimals).\\n     * @custom:access Only owner.\\n     * @custom:event Emits setMaxDailyLimit with old and new limit associated with chain id.\\n     */\\n    function setMaxDailyLimit(uint16 chainId_, uint256 limit_) external onlyOwner {\\n        require(limit_ >= chainIdToMaxSingleTransactionLimit[chainId_], \\\"Daily limit < single transaction limit\\\");\\n        emit SetMaxDailyLimit(chainId_, chainIdToMaxDailyLimit[chainId_], limit_);\\n        chainIdToMaxDailyLimit[chainId_] = limit_;\\n    }\\n\\n    /**\\n     * @notice Sets the maximum limit for a single receive transaction.\\n     * @param chainId_ The destination chain ID.\\n     * @param limit_ The new maximum limit in USD(scaled with 18 decimals).\\n     * @custom:access Only owner.\\n     * @custom:event Emits setMaxSingleReceiveTransactionLimit with old and new limit associated with chain id.\\n     */\\n    function setMaxSingleReceiveTransactionLimit(uint16 chainId_, uint256 limit_) external onlyOwner {\\n        require(limit_ <= chainIdToMaxDailyReceiveLimit[chainId_], \\\"single receive transaction limit > Daily limit\\\");\\n        emit SetMaxSingleReceiveTransactionLimit(chainId_, chainIdToMaxSingleReceiveTransactionLimit[chainId_], limit_);\\n        chainIdToMaxSingleReceiveTransactionLimit[chainId_] = limit_;\\n    }\\n\\n    /**\\n     * @notice Sets the maximum daily limit for receiving transactions.\\n     * @param chainId_ The destination chain ID.\\n     * @param limit_ The new maximum daily limit in USD(scaled with 18 decimals).\\n     * @custom:access Only owner.\\n     * @custom:event Emits setMaxDailyReceiveLimit with old and new limit associated with chain id.\\n     */\\n    function setMaxDailyReceiveLimit(uint16 chainId_, uint256 limit_) external onlyOwner {\\n        require(\\n            limit_ >= chainIdToMaxSingleReceiveTransactionLimit[chainId_],\\n            \\\"Daily limit < single receive transaction limit\\\"\\n        );\\n        emit SetMaxDailyReceiveLimit(chainId_, chainIdToMaxDailyReceiveLimit[chainId_], limit_);\\n        chainIdToMaxDailyReceiveLimit[chainId_] = limit_;\\n    }\\n\\n    /**\\n     * @notice Sets the whitelist address to skip checks on transaction limit.\\n     * @param user_ Address to be add in whitelist.\\n     * @param val_ Boolean to be set (true for user_ address is whitelisted).\\n     * @custom:access Only owner.\\n     * @custom:event Emits setWhitelist.\\n     */\\n    function setWhitelist(address user_, bool val_) external onlyOwner {\\n        emit SetWhitelist(user_, val_);\\n        whitelist[user_] = val_;\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state of the bridge.\\n     * @custom:access Only owner.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Triggers resume state of the bridge.\\n     * @custom:access Only owner.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to user\\n     * @param token_ The address of the ERC-20 token to sweep\\n     * @param to_ The address of the recipient\\n     * @param amount_ The amount of tokens needs to transfer\\n     * @custom:event Emits SweepToken event\\n     * @custom:error Throw InsufficientBalance if amount_ is greater than the available balance of the token in the contract\\n     * @custom:access Only Owner\\n     */\\n    function sweepToken(IERC20 token_, address to_, uint256 amount_) external onlyOwner {\\n        uint256 balance = token_.balanceOf(address(this));\\n        if (amount_ > balance) {\\n            revert InsufficientBalance(amount_, balance);\\n        }\\n\\n        emit SweepToken(address(token_), to_, amount_);\\n\\n        token_.safeTransfer(to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Remove trusted remote from storage.\\n     * @param remoteChainId_ The chain's id corresponds to setting the trusted remote to empty.\\n     * @custom:access Only owner.\\n     * @custom:event Emits TrustedRemoteRemoved once chain id is removed from trusted remote.\\n     */\\n    function removeTrustedRemote(uint16 remoteChainId_) external onlyOwner {\\n        delete trustedRemoteLookup[remoteChainId_];\\n        emit TrustedRemoteRemoved(remoteChainId_);\\n    }\\n\\n    /**\\n     * @notice It enables or disables sendAndCall functionality for the bridge.\\n     * @param enabled_ Boolean indicating whether the sendAndCall function should be enabled or disabled.\\n     */\\n    function updateSendAndCallEnabled(bool enabled_) external onlyOwner {\\n        sendAndCallEnabled = enabled_;\\n        emit UpdateSendAndCallEnabled(enabled_);\\n    }\\n\\n    /**\\n     * @notice Checks the eligibility of a sender to initiate a cross-chain token transfer.\\n     * @dev This external view function assesses whether the specified sender is eligible to transfer the given amount\\n     *      to the specified destination chain. It considers factors such as whitelisting, transaction limits, and a 24-hour window.\\n     * @param from_ The sender's address initiating the transfer.\\n     * @param dstChainId_ Indicates destination chain.\\n     * @param amount_ The quantity of tokens to be transferred.\\n     * @return eligibleToSend A boolean indicating whether the sender is eligible to transfer the tokens.\\n     * @return maxSingleTransactionLimit The maximum limit for a single transaction.\\n     * @return maxDailyLimit The maximum daily limit for transactions.\\n     * @return amountInUsd The equivalent amount in USD based on the oracle price.\\n     * @return transferredInWindow The total amount transferred in the current 24-hour window.\\n     * @return last24HourWindowStart The timestamp when the current 24-hour window started.\\n     * @return isWhiteListedUser A boolean indicating whether the sender is whitelisted.\\n     */\\n    function isEligibleToSend(\\n        address from_,\\n        uint16 dstChainId_,\\n        uint256 amount_\\n    )\\n        external\\n        view\\n        returns (\\n            bool eligibleToSend,\\n            uint256 maxSingleTransactionLimit,\\n            uint256 maxDailyLimit,\\n            uint256 amountInUsd,\\n            uint256 transferredInWindow,\\n            uint256 last24HourWindowStart,\\n            bool isWhiteListedUser\\n        )\\n    {\\n        // Check if the sender's address is whitelisted\\n        isWhiteListedUser = whitelist[from_];\\n\\n        // Calculate the amount in USD using the oracle price\\n        Exp memory oraclePrice = Exp({ mantissa: oracle.getPrice(token()) });\\n        amountInUsd = mul_ScalarTruncate(oraclePrice, amount_);\\n\\n        // Load values for the 24-hour window checks\\n        uint256 currentBlockTimestamp = block.timestamp;\\n        last24HourWindowStart = chainIdToLast24HourWindowStart[dstChainId_];\\n        transferredInWindow = chainIdToLast24HourTransferred[dstChainId_];\\n        maxSingleTransactionLimit = chainIdToMaxSingleTransactionLimit[dstChainId_];\\n        maxDailyLimit = chainIdToMaxDailyLimit[dstChainId_];\\n        if (currentBlockTimestamp - last24HourWindowStart > 1 days) {\\n            transferredInWindow = amountInUsd;\\n            last24HourWindowStart = currentBlockTimestamp;\\n        } else {\\n            transferredInWindow += amountInUsd;\\n        }\\n        eligibleToSend = (isWhiteListedUser ||\\n            ((amountInUsd <= maxSingleTransactionLimit) && (transferredInWindow <= maxDailyLimit)));\\n    }\\n\\n    /**\\n     * @notice Initiates a cross-chain token transfer and triggers a call on the destination chain.\\n     * @dev This internal override function enables the contract to send tokens and invoke calls on the specified\\n     *      destination chain. It checks whether the sendAndCall feature is enabled before proceeding with the transfer.\\n     * @param from_ Address from which tokens will be debited.\\n     * @param dstChainId_ Destination chain id on which tokens will be send.\\n     * @param toAddress_ Address on which tokens will be credited on destination chain.\\n     * @param amount_ Amount of tokens that will be transferred.\\n     * @param payload_ Additional data payload for the call on the destination chain.\\n     * @param dstGasForCall_ The amount of gas allocated for the call on the destination chain.\\n     * @param callparams_ Additional parameters, including refund address, ZRO payment address,\\n     *                   and adapter params.\\n     */\\n    function sendAndCall(\\n        address from_,\\n        uint16 dstChainId_,\\n        bytes32 toAddress_,\\n        uint256 amount_,\\n        bytes calldata payload_,\\n        uint64 dstGasForCall_,\\n        LzCallParams calldata callparams_\\n    ) public payable override {\\n        require(sendAndCallEnabled, \\\"sendAndCall is disabled\\\");\\n\\n        super.sendAndCall(from_, dstChainId_, toAddress_, amount_, payload_, dstGasForCall_, callparams_);\\n    }\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public payable override {\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // it will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(\\n            _srcAddress.length == trustedRemote.length &&\\n                trustedRemote.length > 0 &&\\n                keccak256(_srcAddress) == keccak256(trustedRemote),\\n            \\\"LzApp: invalid source sending contract\\\"\\n        );\\n        super.retryMessage(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    /**\\n     * @notice Empty implementation of renounce ownership to avoid any mishappening.\\n     */\\n    function renounceOwnership() public override {}\\n\\n    /**\\n     * @notice Return's the address of the inner token of this bridge.\\n     * @return Address of the inner token of this bridge.\\n     */\\n    function token() public view override returns (address) {\\n        return address(innerToken);\\n    }\\n\\n    /**\\n     * @notice Checks if the sender is eligible to send tokens\\n     * @param from_ Sender's address sending tokens\\n     * @param dstChainId_ Chain id on which tokens should be sent\\n     * @param amount_ Amount of tokens to be sent\\n     */\\n    function _isEligibleToSend(address from_, uint16 dstChainId_, uint256 amount_) internal {\\n        // Check if the sender's address is whitelisted\\n        bool isWhiteListedUser = whitelist[from_];\\n        // Check if the user is whitelisted and return if true\\n        if (isWhiteListedUser) {\\n            return;\\n        }\\n\\n        // Calculate the amount in USD using the oracle price\\n        uint256 amountInUsd;\\n        Exp memory oraclePrice = Exp({ mantissa: oracle.getPrice(token()) });\\n        amountInUsd = mul_ScalarTruncate(oraclePrice, amount_);\\n\\n        // Load values for the 24-hour window checks\\n        uint256 currentBlockTimestamp = block.timestamp;\\n        uint256 lastDayWindowStart = chainIdToLast24HourWindowStart[dstChainId_];\\n        uint256 transferredInWindow = chainIdToLast24HourTransferred[dstChainId_];\\n        uint256 maxSingleTransactionLimit = chainIdToMaxSingleTransactionLimit[dstChainId_];\\n        uint256 maxDailyLimit = chainIdToMaxDailyLimit[dstChainId_];\\n\\n        // Revert if the amount exceeds the single transaction limit\\n        require(amountInUsd <= maxSingleTransactionLimit, \\\"Single Transaction Limit Exceed\\\");\\n\\n        // Check if the time window has changed (more than 24 hours have passed)\\n        if (currentBlockTimestamp - lastDayWindowStart > 1 days) {\\n            transferredInWindow = amountInUsd;\\n            chainIdToLast24HourWindowStart[dstChainId_] = currentBlockTimestamp;\\n        } else {\\n            transferredInWindow += amountInUsd;\\n        }\\n\\n        // Revert if the amount exceeds the daily limit\\n        require(transferredInWindow <= maxDailyLimit, \\\"Daily Transaction Limit Exceed\\\");\\n\\n        // Update the amount for the 24-hour window\\n        chainIdToLast24HourTransferred[dstChainId_] = transferredInWindow;\\n    }\\n\\n    /**\\n     * @notice Checks if receiver is able to receive tokens\\n     * @param toAddress_ Receiver address\\n     * @param srcChainId_ Source chain id from which token is send\\n     * @param receivedAmount_ Amount of tokens received\\n     */\\n    function _isEligibleToReceive(address toAddress_, uint16 srcChainId_, uint256 receivedAmount_) internal {\\n        // Check if the recipient's address is whitelisted\\n        bool isWhiteListedUser = whitelist[toAddress_];\\n        // Check if the user is whitelisted and return if true\\n        if (isWhiteListedUser) {\\n            return;\\n        }\\n\\n        // Calculate the received amount in USD using the oracle price\\n        uint256 receivedAmountInUsd;\\n        Exp memory oraclePrice = Exp({ mantissa: oracle.getPrice(address(token())) });\\n        receivedAmountInUsd = mul_ScalarTruncate(oraclePrice, receivedAmount_);\\n\\n        uint256 currentBlockTimestamp = block.timestamp;\\n\\n        // Load values for the 24-hour window checks for receiving\\n        uint256 lastDayReceiveWindowStart = chainIdToLast24HourReceiveWindowStart[srcChainId_];\\n        uint256 receivedInWindow = chainIdToLast24HourReceived[srcChainId_];\\n        uint256 maxSingleReceiveTransactionLimit = chainIdToMaxSingleReceiveTransactionLimit[srcChainId_];\\n        uint256 maxDailyReceiveLimit = chainIdToMaxDailyReceiveLimit[srcChainId_];\\n\\n        // Check if the received amount exceeds the single transaction limit\\n        require(receivedAmountInUsd <= maxSingleReceiveTransactionLimit, \\\"Single Transaction Limit Exceed\\\");\\n\\n        // Check if the time window has changed (more than 24 hours have passed)\\n        if (currentBlockTimestamp - lastDayReceiveWindowStart > 1 days) {\\n            receivedInWindow = receivedAmountInUsd;\\n            chainIdToLast24HourReceiveWindowStart[srcChainId_] = currentBlockTimestamp;\\n        } else {\\n            receivedInWindow += receivedAmountInUsd;\\n        }\\n\\n        // Revert if the received amount exceeds the daily limit\\n        require(receivedInWindow <= maxDailyReceiveLimit, \\\"Daily Transaction Limit Exceed\\\");\\n\\n        // Update the received amount for the 24-hour window\\n        chainIdToLast24HourReceived[srcChainId_] = receivedInWindow;\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from sender to receiver account.\\n     * @param from_ Address from which token has to be transferred(Sender).\\n     * @param to_ Address on which token will be tranferred(Receiver).\\n     * @param amount_ Amount of token to be transferred.\\n     * @return Actual balance difference.\\n     */\\n    function _transferFrom(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) internal override whenNotPaused returns (uint256) {\\n        uint256 before = innerToken.balanceOf(to_);\\n        if (from_ == address(this)) {\\n            innerToken.safeTransfer(to_, amount_);\\n        } else {\\n            innerToken.safeTransferFrom(from_, to_, amount_);\\n        }\\n        return innerToken.balanceOf(to_) - before;\\n    }\\n\\n    /**\\n     * @notice Returns Conversion rate factor from large decimals to shared decimals.\\n     * @return Conversion rate factor.\\n     */\\n    function _ld2sdRate() internal view override returns (uint256) {\\n        return ld2sdRate;\\n    }\\n}\\n\",\"keccak256\":\"0x75d98574e674d1c3f35ac92c9e930d0238059b540d3385abeb14b20ef03cb13c\",\"license\":\"BSD-3-Clause\"},\"contracts/Bridge/XVSProxyOFTDest.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { IXVS } from \\\"./interfaces/IXVS.sol\\\";\\nimport { BaseXVSProxyOFT } from \\\"./BaseXVSProxyOFT.sol\\\";\\n\\n/**\\n * @title XVSProxyOFTDest\\n * @author Venus\\n * @notice XVSProxyOFTDest contract builds upon the functionality of its parent contract, BaseXVSProxyOFT,\\n * and focuses on managing token transfers to the destination chain.\\n * It provides functions to check eligibility and perform the actual token transfers while maintaining strict access controls and pausing mechanisms.\\n */\\n\\ncontract XVSProxyOFTDest is BaseXVSProxyOFT {\\n    /**\\n     * @notice Emits when stored message dropped without successful retrying.\\n     */\\n    event DropFailedMessage(uint16 srcChainId, bytes indexed srcAddress, uint64 nonce);\\n\\n    constructor(\\n        address tokenAddress_,\\n        uint8 sharedDecimals_,\\n        address lzEndpoint_,\\n        address oracle_\\n    ) BaseXVSProxyOFT(tokenAddress_, sharedDecimals_, lzEndpoint_, oracle_) {}\\n\\n    /**\\n     * @notice Clear failed messages from the storage.\\n     * @param srcChainId_ Chain id of source\\n     * @param srcAddress_ Address of source followed by current bridge address\\n     * @param nonce_ Nonce_ of the transaction\\n     * @custom:access Only owner\\n     * @custom:event Emits DropFailedMessage on clearance of failed message.\\n     */\\n    function dropFailedMessage(uint16 srcChainId_, bytes memory srcAddress_, uint64 nonce_) external onlyOwner {\\n        failedMessages[srcChainId_][srcAddress_][nonce_] = bytes32(0);\\n        emit DropFailedMessage(srcChainId_, srcAddress_, nonce_);\\n    }\\n\\n    /**\\n     * @notice Returns the total circulating supply of the token on the destination chain i.e (total supply).\\n     * @return total circulating supply of the token on the destination chain.\\n     */\\n    function circulatingSupply() public view override returns (uint256) {\\n        return innerToken.totalSupply();\\n    }\\n\\n    /**\\n     * @notice Debit tokens from the given address\\n     * @param from_  Address from which tokens to be debited\\n     * @param dstChainId_ Destination chain id\\n     * @param amount_ Amount of tokens to be debited\\n     * @return Actual amount debited\\n     */\\n    function _debitFrom(\\n        address from_,\\n        uint16 dstChainId_,\\n        bytes32,\\n        uint256 amount_\\n    ) internal override whenNotPaused returns (uint256) {\\n        require(from_ == _msgSender(), \\\"ProxyOFT: owner is not send caller\\\");\\n        _isEligibleToSend(from_, dstChainId_, amount_);\\n        IXVS(address(innerToken)).burn(from_, amount_);\\n        return amount_;\\n    }\\n\\n    /**\\n     * @notice Credit tokens in the given account\\n     * @param srcChainId_  Source chain id\\n     * @param toAddress_ Address on which token will be credited\\n     * @param amount_ Amount of tokens to be credited\\n     * @return Actual amount credited\\n     */\\n    function _creditTo(\\n        uint16 srcChainId_,\\n        address toAddress_,\\n        uint256 amount_\\n    ) internal override whenNotPaused returns (uint256) {\\n        _isEligibleToReceive(toAddress_, srcChainId_, amount_);\\n        IXVS(address(innerToken)).mint(toAddress_, amount_);\\n        return amount_;\\n    }\\n}\\n\",\"keccak256\":\"0x4a4bf23d37f26b82877c24326d81699f0ca217a593599fa179d45db8be919e50\",\"license\":\"BSD-3-Clause\"},\"contracts/Bridge/interfaces/IXVS.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/**\\n * @title IXVS\\n * @author Venus\\n * @notice Interface implemented by `XVS` token.\\n */\\ninterface IXVS {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x55c954155c4499e8ef1915ad28c5567c247e4397dc12ba553b33c5edb1114dba\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162005adf38038062005adf833981016040819052620000359162000379565b6000805460ff19169055838383838282818180806200005433620002c6565b6001600160a01b0316608052505060ff1660a05250620000769050846200031f565b62000081826200031f565b6200008c816200031f565b6001600160a01b03841660c081905260408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009283929091620000d89190620003d6565b600060405180830381855afa9150503d806000811462000115576040519150601f19603f3d011682016040523d82523d6000602084013e6200011a565b606091505b509150915081620001815760405162461bcd60e51b815260206004820152602660248201527f50726f78794f46543a206661696c656420746f2067657420746f6b656e20646560448201526563696d616c7360d01b60648201526084015b60405180910390fd5b60008180602001905181019062000199919062000414565b90508060ff168660ff161115620002085760405162461bcd60e51b815260206004820152602c60248201527f50726f78794f46543a20736861726564446563696d616c73206d75737420626560448201526b203c3d20646563696d616c7360a01b606482015260840162000178565b6200021486826200044f565b6200022190600a62000574565b60e0526040516001600160a01b038816907f0b673f021ff9a27bbe58f282908695869e130b3103029190387b83650806c2c390600090a26040516001600160a01b038516906000907f05cd89403c6bdeac21c2ff33de395121a31fa1bc2bf3adf4825f1f86e79969dd908290a35050600780546001600160a01b0390931661010002610100600160a81b03199093169290921790915550620005859650505050505050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6001600160a01b03811662000347576040516342bcdf7f60e11b815260040160405180910390fd5b50565b80516001600160a01b03811681146200036257600080fd5b919050565b805160ff811681146200036257600080fd5b600080600080608085870312156200039057600080fd5b6200039b856200034a565b9350620003ab6020860162000367565b9250620003bb604086016200034a565b9150620003cb606086016200034a565b905092959194509250565b6000825160005b81811015620003f95760208186018101518583015201620003dd565b8181111562000409576000828501525b509190910192915050565b6000602082840312156200042757600080fd5b620004328262000367565b9392505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8416808210156200046c576200046c62000439565b90039392505050565b600181815b80851115620004b65781600019048211156200049a576200049a62000439565b80851615620004a857918102915b93841c93908002906200047a565b509250929050565b600082620004cf575060016200056e565b81620004de575060006200056e565b8160018114620004f75760028114620005025762000522565b60019150506200056e565b60ff84111562000516576200051662000439565b50506001821b6200056e565b5060208310610133831016604e8410600b841016171562000547575081810a6200056e565b62000553838362000475565b80600019048211156200056a576200056a62000439565b0290505b92915050565b60006200043260ff841683620004be565b60805160a05160c05160e05161548d62000652600039600081816130d4015281816136470152613b82015260008181610ca10152818161106801528181611ba701528181612d7501528181612e0101528181612e3a01528181612e830152818161371d01528181613beb01528181613db401526141e4015260006108be015260008181610abe01528181610cf501528181610f3c01528181610fe40152818161142601528181611ed9015281816123cc015281816125a701528181612aa501526138ab015261548d6000f3fe6080604052600436106103b75760003560e01c80637dc0d1d0116101f2578063baf3292d1161010d578063df2a5b3b116100a0578063f2fde38b1161006f578063f2fde38b14610c52578063f5ecbdbc14610c72578063fc0c546a14610c92578063fdff235b14610cc557600080fd5b8063df2a5b3b14610bdd578063e6a20ae614610bfd578063eaffd49a14610c12578063eb8d72b714610c3257600080fd5b8063cc01e9b6116100dc578063cc01e9b614610b50578063cc7015ae14610b70578063d1deba1f14610b9d578063d708a46814610bb057600080fd5b8063baf3292d14610ae0578063c1e9132e14610b00578063c446183414610b1a578063cbed8b9c14610b3057600080fd5b806393a61d6c116101855780639f38369a116101545780639f38369a14610a4c578063a4c51df514610a6c578063a6c3d16514610a8c578063b353aaa714610aac57600080fd5b806393a61d6c1461097d578063950c8a74146109aa5780639b19251a146109ca5780639bdb9812146109fa57600080fd5b80638cfd8f5c116101c15780638cfd8f5c146108e05780638da5cb5b14610918578063904365671461093b5780639358928b1461096857600080fd5b80637dc0d1d01461083a5780638456cb591461087757806384e69c691461088c578063857749b0146108ac57600080fd5b80634c42899a116102e257806364aff9ec11610275578063715018a611610244578063715018a6146107ce5780637533d788146107da57806376203b48146108075780637adbf9731461081a57600080fd5b806364aff9ec1461075b57806366ad5c8a1461077b578063695ef6bf1461079b57806369c1e7b8146107ae57600080fd5b806353489d6c116102b157806353489d6c146106b457806353d6fd59146106d45780635b8c41e6146106f45780635c975abb1461074357600080fd5b80634c42899a146106135780634cec62561461063a5780634ed2c662146106675780634f4ba0f41461068757600080fd5b80632dbbec081161035a5780633f1f4fa4116103295780633f1f4fa41461059c5780633f4ba83a146105c957806342d65a8d146105de57806344770515146105fe57600080fd5b80632dbbec08146104ec578063365260b41461050c5780633c4ec39b146105415780633d8b38f61461057c57600080fd5b80630df37483116103965780630df374831461043357806310ddb13714610453578063182b4b89146104735780632488eec8146104cc57600080fd5b80621d3567146103bc57806301ffc9a7146103de57806307e0db1714610413575b600080fd5b3480156103c857600080fd5b506103dc6103d736600461466d565b610cf2565b005b3480156103ea57600080fd5b506103fe6103f9366004614700565b610ee4565b60405190151581526020015b60405180910390f35b34801561041f57600080fd5b506103dc61042e36600461472a565b610f1b565b34801561043f57600080fd5b506103dc61044e366004614745565b610fa4565b34801561045f57600080fd5b506103dc61046e36600461472a565b610fc3565b34801561047f57600080fd5b5061049361048e366004614784565b61101b565b6040805197151588526020880196909652948601939093526060850191909152608084015260a0830152151560c082015260e00161040a565b3480156104d857600080fd5b506103dc6104e7366004614745565b611191565b3480156104f857600080fd5b506103dc61050736600461472a565b611275565b34801561051857600080fd5b5061052c6105273660046147d0565b6112d4565b6040805192835260208301919091520161040a565b34801561054d57600080fd5b5061056e61055c36600461472a565b600d6020526000908152604090205481565b60405190815260200161040a565b34801561058857600080fd5b506103fe610597366004614837565b611329565b3480156105a857600080fd5b5061056e6105b736600461472a565b60036020526000908152604090205481565b3480156105d557600080fd5b506103dc6113f5565b3480156105ea57600080fd5b506103dc6105f9366004614837565b611407565b34801561060a57600080fd5b5061056e600081565b34801561061f57600080fd5b50610628600081565b60405160ff909116815260200161040a565b34801561064657600080fd5b5061056e61065536600461472a565b600a6020526000908152604090205481565b34801561067357600080fd5b506103dc610682366004614889565b61148d565b34801561069357600080fd5b5061056e6106a236600461472a565b60096020526000908152604090205481565b3480156106c057600080fd5b506103dc6106cf366004614745565b6114d2565b3480156106e057600080fd5b506103dc6106ef3660046148a6565b6115b6565b34801561070057600080fd5b5061056e61070f36600461494c565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561074f57600080fd5b5060005460ff166103fe565b34801561076757600080fd5b506103dc6107763660046149ec565b61162e565b34801561078757600080fd5b506103dc61079636600461466d565b611735565b6103dc6107a9366004614a45565b611811565b3480156107ba57600080fd5b506103dc6107c9366004614745565b61187c565b3480156103dc57600080fd5b3480156107e657600080fd5b506107fa6107f536600461472a565b611968565b60405161040a9190614b10565b6103dc610815366004614b23565b611a02565b34801561082657600080fd5b506103dc610835366004614bd5565b611a6e565b34801561084657600080fd5b5060075461085f9061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161040a565b34801561088357600080fd5b506103dc611ae6565b34801561089857600080fd5b506103dc6108a736600461494c565b611af6565b3480156108b857600080fd5b506106287f000000000000000000000000000000000000000000000000000000000000000081565b3480156108ec57600080fd5b5061056e6108fb366004614bf2565b600260209081526000928352604080842090915290825290205481565b34801561092457600080fd5b5060005461010090046001600160a01b031661085f565b34801561094757600080fd5b5061056e61095636600461472a565b600c6020526000908152604090205481565b34801561097457600080fd5b5061056e611ba3565b34801561098957600080fd5b5061056e61099836600461472a565b600b6020526000908152604090205481565b3480156109b657600080fd5b5060045461085f906001600160a01b031681565b3480156109d657600080fd5b506103fe6109e5366004614bd5565b60106020526000908152604090205460ff1681565b348015610a0657600080fd5b506103fe610a1536600461494c565b6006602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205460ff1681565b348015610a5857600080fd5b506107fa610a6736600461472a565b611c2c565b348015610a7857600080fd5b5061052c610a87366004614c25565b611d42565b348015610a9857600080fd5b506103dc610aa7366004614837565b611dd1565b348015610ab857600080fd5b5061085f7f000000000000000000000000000000000000000000000000000000000000000081565b348015610aec57600080fd5b506103dc610afb366004614bd5565b611e64565b348015610b0c57600080fd5b506007546103fe9060ff1681565b348015610b2657600080fd5b5061056e61271081565b348015610b3c57600080fd5b506103dc610b4b366004614ce2565b611eba565b348015610b5c57600080fd5b506103dc610b6b366004614745565b611f4f565b348015610b7c57600080fd5b5061056e610b8b36600461472a565b60086020526000908152604090205481565b6103dc610bab36600461466d565b61203b565b348015610bbc57600080fd5b5061056e610bcb36600461472a565b600e6020526000908152604090205481565b348015610be957600080fd5b506103dc610bf8366004614d50565b61213f565b348015610c0957600080fd5b50610628600181565b348015610c1e57600080fd5b506103dc610c2d366004614d6e565b6121a9565b348015610c3e57600080fd5b506103dc610c4d366004614837565b6122c8565b348015610c5e57600080fd5b506103dc610c6d366004614bd5565b612322565b348015610c7e57600080fd5b506107fa610c8d366004614e36565b61239b565b348015610c9e57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061085f565b348015610cd157600080fd5b5061056e610ce036600461472a565b600f6020526000908152604090205481565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610d6f5760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff861660009081526001602052604081208054610d8d90614e83565b80601f0160208091040260200160405190810160405280929190818152602001828054610db990614e83565b8015610e065780601f10610ddb57610100808354040283529160200191610e06565b820191906000526020600020905b815481529060010190602001808311610de957829003601f168201915b50505050509050805186869050148015610e21575060008151115b8015610e49575080516020820120604051610e3f9088908890614eb7565b6040518091039020145b610e655760405162461bcd60e51b8152600401610d6690614ec7565b610edb8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061244e92505050565b50505050505050565b60006001600160e01b03198216631f7ecdf760e01b1480610f1557506301ffc9a760e01b6001600160e01b03198316145b92915050565b610f236124c7565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610f8957600080fd5b505af1158015610f9d573d6000803e3d6000fd5b5050505050565b610fac6124c7565b61ffff909116600090815260036020526040902055565b610fcb6124c7565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610f6f565b6001600160a01b03838116600090815260106020908152604080832054815192830190915260075492938493849384938493849360ff909216928492909182916101009004166341976e097f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156110cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ef9190614f0d565b905290506110fd818a612527565b61ffff8b166000908152600b6020908152604080832054600a835281842054600884528285205460099094529190932054919a509098509196509094509250426201518061114b8583614f3c565b111561115c57859450809350611169565b6111668686614f53565b94505b828061118057508786111580156111805750868511155b985050509397509397509397909450565b6111996124c7565b61ffff821660009081526008602052604090205481101561120b5760405162461bcd60e51b815260206004820152602660248201527f4461696c79206c696d6974203c2073696e676c65207472616e73616374696f6e604482015265081b1a5b5a5d60d21b6064820152608401610d66565b61ffff82166000818152600960209081526040918290205482519384529083015281018290527f4dd31065e259d5284e44d1f9265710da72eafcf78dc925e3881189fc3b71f6939060600160405180910390a161ffff909116600090815260096020526040902055565b61127d6124c7565b61ffff81166000908152600160205260408120611299916144b0565b60405161ffff821681527f6d5075c81d4d9e75bec6052f4e44f58f8a8cf1327544addbbf015fb06f83bd37906020015b60405180910390a150565b60008061131a8888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061253f92505050565b91509150965096945050505050565b61ffff83166000908152600160205260408120805482919061134a90614e83565b80601f016020809104026020016040519081016040528092919081815260200182805461137690614e83565b80156113c35780601f10611398576101008083540402835291602001916113c3565b820191906000526020600020905b8154815290600101906020018083116113a657829003601f168201915b5050505050905083836040516113da929190614eb7565b60405180910390208180519060200120149150509392505050565b6113fd6124c7565b611405612633565b565b61140f6124c7565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d9061145f90869086908690600401614f94565b600060405180830381600087803b15801561147957600080fd5b505af1158015610edb573d6000803e3d6000fd5b6114956124c7565b6007805460ff19168215159081179091556040517fe628f01c6f4e6340598d3a2913390db68e8859379eebff349e170f2b16baed0090600090a250565b6114da6124c7565b61ffff821660009081526009602052604090205481111561154c5760405162461bcd60e51b815260206004820152602660248201527f53696e676c65207472616e73616374696f6e206c696d6974203e204461696c79604482015265081b1a5b5a5d60d21b6064820152608401610d66565b61ffff82166000818152600860209081526040918290205482519384529083015281018290527f7babeac42ccbb33537ee421fedc4db7b5f251b5d2a3fa5c0ff4b35b2d783be879060600160405180910390a161ffff909116600090815260086020526040902055565b6115be6124c7565b816001600160a01b03167ff6019ec0a78d156d249a1ec7579e2321f6ac7521d6e1d2eacf90ba4a184dcceb826040516115fb911515815260200190565b60405180910390a26001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b6116366124c7565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561167d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a19190614f0d565b9050808211156116ce5760405163cf47918160e01b81526004810183905260248101829052604401610d66565b826001600160a01b0316846001600160a01b03167f6d25be279134f4ecaa4770aff0c3d916d9e7c5ef37b65ed95dbdba411f5d54d58460405161171391815260200190565b60405180910390a361172f6001600160a01b0385168484612685565b50505050565b3330146117935760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610d66565b6118098686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152899350915087908790819084018382808284376000920191909152506126ed92505050565b505050505050565b611809858585856118256020870187614bd5565b6118356040880160208901614bd5565b6118426040890189614fb2565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061277492505050565b6118846124c7565b61ffff82166000908152600c60205260409020548110156118fe5760405162461bcd60e51b815260206004820152602e60248201527f4461696c79206c696d6974203c2073696e676c6520726563656976652074726160448201526d1b9cd858dd1a5bdb881b1a5b5a5d60921b6064820152608401610d66565b61ffff82166000818152600d60209081526040918290205482519384529083015281018290527f95dc51094cd27cf4ee3fd0dbb50cf96f8df1629c822f5434c4a34d7eb03c97249060600160405180910390a161ffff9091166000908152600d6020526040902055565b6001602052600090815260409020805461198190614e83565b80601f01602080910402602001604051908101604052809291908181526020018280546119ad90614e83565b80156119fa5780601f106119cf576101008083540402835291602001916119fa565b820191906000526020600020905b8154815290600101906020018083116119dd57829003601f168201915b505050505081565b60075460ff16611a545760405162461bcd60e51b815260206004820152601760248201527f73656e64416e6443616c6c2069732064697361626c65640000000000000000006044820152606401610d66565b611a64888888888888888861285c565b5050505050505050565b611a766124c7565b611a7f81612900565b6007546040516001600160a01b0380841692610100900416907f05cd89403c6bdeac21c2ff33de395121a31fa1bc2bf3adf4825f1f86e79969dd90600090a3600780546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b611aee6124c7565b611405612927565b611afe6124c7565b61ffff83166000908152600560205260408082209051611b1f908590614ff8565b9081526040805191829003602090810183206001600160401b038616600090815291522091909155611b52908390614ff8565b6040805191829003822061ffff861683526001600160401b0384166020840152917f48a980eea4ea1c540209e2f9f32a4c2edf51fab37b1d21f453868301ecb6e2ee910160405180910390a2505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c279190614f0d565b905090565b61ffff8116600090815260016020526040812080546060929190611c4f90614e83565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7b90614e83565b8015611cc85780601f10611c9d57610100808354040283529160200191611cc8565b820191906000526020600020905b815481529060010190602001808311611cab57829003601f168201915b505050505090508051600003611d205760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610d66565b611d3b600060148351611d339190614f3c565b839190612964565b9392505050565b600080611dbf8b8b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b81528e93508d9250908c908c9081908401838280828437600092019190915250612a7192505050565b91509150995099975050505050505050565b611dd96124c7565b818130604051602001611dee93929190615014565b60408051601f1981840301815291815261ffff85166000908152600160209081529190208251611e23939192909101906144ea565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611e5793929190614f94565b60405180910390a1505050565b611e6c6124c7565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b906020016112c9565b611ec26124c7565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611f16908890889088908890889060040161503a565b600060405180830381600087803b158015611f3057600080fd5b505af1158015611f44573d6000803e3d6000fd5b505050505050505050565b611f576124c7565b61ffff82166000908152600d6020526040902054811115611fd15760405162461bcd60e51b815260206004820152602e60248201527f73696e676c652072656365697665207472616e73616374696f6e206c696d697460448201526d080f8811185a5b1e481b1a5b5a5d60921b6064820152608401610d66565b61ffff82166000818152600c60209081526040918290205482519384529083015281018290527f2c42997a938a029910a78e7c28d762b349c28e70f3a89c1fbccbb1a46020b1599060600160405180910390a161ffff9091166000908152600c6020526040902055565b61ffff86166000908152600160205260408120805461205990614e83565b80601f016020809104026020016040519081016040528092919081815260200182805461208590614e83565b80156120d25780601f106120a7576101008083540402835291602001916120d2565b820191906000526020600020905b8154815290600101906020018083116120b557829003601f168201915b505050505090508051868690501480156120ed575060008151115b801561211557508051602082012060405161210b9088908890614eb7565b6040518091039020145b6121315760405162461bcd60e51b8152600401610d6690614ec7565b610edb878787878787612b33565b6121476124c7565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611e57565b3330146121f85760405162461bcd60e51b815260206004820152601f60248201527f4f4654436f72653a2063616c6c6572206d757374206265204f4654436f7265006044820152606401610d66565b612203308686612d49565b9350846001600160a01b03168a61ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf8660405161224591815260200190565b60405180910390a3604051633fe79aed60e11b81526001600160a01b03861690637fcf35da908390612289908e908e908e908e908e908d908d908d90600401615068565b600060405180830381600088803b1580156122a357600080fd5b5087f11580156122b7573d6000803e3d6000fd5b505050505050505050505050505050565b6122d06124c7565b61ffff831660009081526001602052604090206122ee90838361456e565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611e5793929190614f94565b61232a6124c7565b6001600160a01b03811661238f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d66565b61239881612f03565b50565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa15801561241b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261244391908101906150c3565b90505b949350505050565b6000806124b15a60966366ad5c8a60e01b898989896040516024016124769493929190615130565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190612f5c565b9150915081611809576118098686868685612fe6565b6000546001600160a01b036101009091041633146114055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d66565b6000806125348484613083565b9050612446816130b4565b600080600061258d87612551886130cc565b6040805160006020820152602181019390935260c09190911b6001600160c01b0319166041830152805160298184030181526049909201905290565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb10906125e4908b90309086908b908b9060040161516e565b6040805180830381865afa158015612600573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262491906151c2565b92509250509550959350505050565b61263b613152565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b0383166024820152604481018290526126e890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261319b565b505050565b60006126f98282613270565b905060ff81166127145761270f858585856132cc565b610f9d565b60001960ff82160161272c5761270f8585858561335c565b60405162461bcd60e51b815260206004820152601c60248201527f4f4654436f72653a20756e6b6e6f776e207061636b65742074797065000000006044820152606401610d66565b60006127828782848161356a565b61278b8561363f565b50905061279a8888888461367f565b9050600081116127e85760405162461bcd60e51b815260206004820152601960248201527813d19510dbdc994e88185b5bdd5b9d081d1bdbc81cdb585b1b603a1b6044820152606401610d66565b60006127f787612551846130cc565b9050612807888287878734613782565b86896001600160a01b03168961ffff167fd81fc9b8523134ed613870ed029d6170cbb73aa6a6bc311b9a642689fb9df59a8560405161284891815260200190565b60405180910390a450979650505050505050565b611f448888888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506128a99150506020890189614bd5565b6128b960408a0160208b01614bd5565b6128c660408b018b614fb2565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061392792505050565b6001600160a01b038116612398576040516342bcdf7f60e11b815260040160405180910390fd5b61292f613a1c565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126683390565b60608161297281601f614f53565b10156129b15760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610d66565b6129bb8284614f53565b845110156129ff5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610d66565b606082158015612a1e5760405191506000825260208201604052612a68565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612a57578051835260209283019201612a3f565b5050858452601f01601f1916604052505b50949350505050565b6000806000612a8b338a612a848b6130cc565b8a8a613a62565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090612ae2908d90309086908b908b9060040161516e565b6040805180830381865afa158015612afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2291906151c2565b925092505097509795505050505050565b61ffff86166000908152600560205260408082209051612b569088908890614eb7565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080612bd65760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610d66565b808383604051612be7929190614eb7565b604051809103902014612c465760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610d66565b61ffff87166000908152600560205260408082209051612c699089908990614eb7565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252612d01918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506126ed92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051612d389594939291906151e6565b60405180910390a150505050505050565b6000612d53613a1c565b6040516370a0823160e01b81526001600160a01b0384811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015612dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de29190614f0d565b9050306001600160a01b03861603612e2d57612e286001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585612685565b612e62565b612e626001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868686613aa3565b6040516370a0823160e01b81526001600160a01b03858116600483015282917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015612ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef09190614f0d565b612efa9190614f3c565b95945050505050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6000606060008060008661ffff166001600160401b03811115612f8157612f816148df565b6040519080825280601f01601f191660200182016040528015612fab576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115612fcd578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff168152602001908152602001600020856040516130179190614ff8565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c906130749087908790879087908790615221565b60405180910390a15050505050565b60408051602081019091526000815260405180602001604052806130ab856000015185613adb565b90529392505050565b8051600090610f1590670de0b6b3a764000090615289565b6000806130f97f000000000000000000000000000000000000000000000000000000000000000084615289565b90506001600160401b03811115610f155760405162461bcd60e51b815260206004820152601a60248201527f4f4654436f72653a20616d6f756e745344206f766572666c6f770000000000006044820152606401610d66565b60005460ff166114055760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610d66565b60006131f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ae79092919063ffffffff16565b9050805160001480613211575080806020019051810190613211919061529d565b6126e85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d66565b600061327d826001614f53565b835110156132c35760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610d66565b50016001015190565b6000806132d883613af6565b90925090506001600160a01b0382166132f15761dead91505b60006132fc82613b7b565b9050613309878483613bb0565b9050826001600160a01b03168761ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf8360405161334b91815260200190565b60405180910390a350505050505050565b600080600080600061336d86613c4f565b945094509450945094506000600660008b61ffff1661ffff168152602001908152602001600020896040516133a29190614ff8565b90815260408051602092819003830190206001600160401b038b166000908152925281205460ff1691506133d585613b7b565b905081613443576133e78b3083613bb0565b61ffff8c1660009081526006602052604090819020905191925060019161340f908d90614ff8565b90815260408051602092819003830190206001600160401b038d16600090815292529020805460ff19169115159190911790555b6001600160a01b0386163b61349a576040516001600160a01b03871681527f9aedf5fdba8716db3b6705ca00150643309995d4f818a249ed6dde6677e7792d9060200160405180910390a15050505050505061172f565b8a8a8a8a8a8a868a60008a6134b8578b6001600160401b03166134ba565b5a5b90506000806134ec5a609663eaffd49a60e01b8e8e8e8d8d8d8d8d6040516024016124769897969594939291906152ba565b915091508115613545578751602089012060405161ffff8d16907fb8890edbfc1c74692f527444645f95489c3703cc2df42e4a366f5d06fa6cd88490613537908e908e90869061532e565b60405180910390a250613552565b6135528b8b8b8b85612fe6565b50505050505050505050505050505050505050505050565b600061357583613d06565b61ffff808716600090815260026020908152604080832093891683529290522054909150806135e65760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610d66565b6135f08382614f53565b8210156118095760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610d66565b60008061366c7f00000000000000000000000000000000000000000000000000000000000000008461535c565b90506136788184614f3c565b9150915091565b6000613689613a1c565b6001600160a01b03851633146136ec5760405162461bcd60e51b815260206004820152602260248201527f50726f78794f46543a206f776e6572206973206e6f742073656e642063616c6c60448201526132b960f11b6064820152608401610d66565b6136f7858584613d62565b604051632770a7eb60e21b81526001600160a01b038681166004830152602482018490527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac90604401600060405180830381600087803b15801561376157600080fd5b505af1158015613775573d6000803e3d6000fd5b5093979650505050505050565b61ffff8616600090815260016020526040812080546137a090614e83565b80601f01602080910402602001604051908101604052809291908181526020018280546137cc90614e83565b80156138195780601f106137ee57610100808354040283529160200191613819565b820191906000526020600020905b8154815290600101906020018083116137fc57829003601f168201915b50505050509050805160000361388a5760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610d66565b613895878751613f84565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c58031009084906138ec908b9086908c908c908c908c90600401615370565b6000604051808303818588803b15801561390557600080fd5b505af1158015613919573d6000803e3d6000fd5b505050505050505050505050565b600061393f896001846001600160401b03891661356a565b6139488761363f565b5090506139578a8a8a8461367f565b9050600081116139a55760405162461bcd60e51b815260206004820152601960248201527813d19510dbdc994e88185b5bdd5b9d081d1bdbc81cdb585b1b603a1b6044820152606401610d66565b60006139b5338a612a84856130cc565b90506139c58a8287878734613782565b888b6001600160a01b03168b61ffff167fd81fc9b8523134ed613870ed029d6170cbb73aa6a6bc311b9a642689fb9df59a85604051613a0691815260200190565b60405180910390a4509998505050505050505050565b60005460ff16156114055760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610d66565b6060600185856001600160a01b0389168587604051602001613a89969594939291906153d7565b604051602081830303815290604052905095945050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261172f9085906323b872dd60e01b906084016126b1565b6000611d3b8284615438565b60606124468484600085613ff5565b60008080613b048482613270565b60ff16148015613b15575082516029145b613b5c5760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b6044820152606401610d66565b613b6783600d6140d0565b9150613b74836021614135565b9050915091565b6000610f157f00000000000000000000000000000000000000000000000000000000000000006001600160401b038416615438565b6000613bba613a1c565b613bc5838584614192565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b158015613c2f57600080fd5b505af1158015613c43573d6000803e3d6000fd5b50939695505050505050565b600080806060816001613c628783613270565b60ff1614613cad5760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b6044820152606401610d66565b613cb886600d6140d0565b9350613cc5866021614135565b9250613cd28660296143b4565b9450613cdf866049614135565b9050613cfb6051808851613cf39190614f3c565b889190612964565b915091939590929450565b6000602282511015613d5a5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610d66565b506022015190565b6001600160a01b03831660009081526010602052604090205460ff168015613d8a5750505050565b60408051602081019091526007546000918291819061010090046001600160a01b03166341976e097f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e3b9190614f0d565b90529050613e498185612527565b61ffff86166000908152600b6020908152604080832054600a835281842054600884528285205460099094529190932054939550429390919081871115613ed25760405162461bcd60e51b815260206004820152601f60248201527f53696e676c65205472616e73616374696f6e204c696d697420457863656564006044820152606401610d66565b62015180613ee08587614f3c565b1115613f045761ffff8a166000908152600b60205260409020859055869250613f11565b613f0e8784614f53565b92505b80831115613f615760405162461bcd60e51b815260206004820152601e60248201527f4461696c79205472616e73616374696f6e204c696d69742045786365656400006044820152606401610d66565b505061ffff9097166000908152600a602052604090209690965550505050505050565b61ffff821660009081526003602052604081205490819003613fa557506127105b808211156126e85760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c617267656044820152606401610d66565b6060824710156140565760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d66565b600080866001600160a01b031685876040516140729190614ff8565b60006040518083038185875af1925050503d80600081146140af576040519150601f19603f3d011682016040523d82523d6000602084013e6140b4565b606091505b50915091506140c587838387614412565b979650505050505050565b60006140dd826014614f53565b835110156141255760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610d66565b500160200151600160601b900490565b6000614142826008614f53565b835110156141895760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b6044820152606401610d66565b50016008015190565b6001600160a01b03831660009081526010602052604090205460ff1680156141ba5750505050565b60408051602081019091526007546000918291819061010090046001600160a01b03166341976e097f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015614247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061426b9190614f0d565b905290506142798185612527565b61ffff86166000908152600f6020908152604080832054600e835281842054600c845282852054600d90945291909320549395504293909190818711156143025760405162461bcd60e51b815260206004820152601f60248201527f53696e676c65205472616e73616374696f6e204c696d697420457863656564006044820152606401610d66565b620151806143108587614f3c565b11156143345761ffff8a166000908152600f60205260409020859055869250614341565b61433e8784614f53565b92505b808311156143915760405162461bcd60e51b815260206004820152601e60248201527f4461696c79205472616e73616374696f6e204c696d69742045786365656400006044820152606401610d66565b505061ffff9097166000908152600e602052604090209690965550505050505050565b60006143c1826020614f53565b835110156144095760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b6044820152606401610d66565b50016020015190565b6060831561448157825160000361447a576001600160a01b0385163b61447a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d66565b5081612446565b61244683838151156144965781518083602001fd5b8060405162461bcd60e51b8152600401610d669190614b10565b5080546144bc90614e83565b6000825580601f106144cc575050565b601f01602090049060005260206000209081019061239891906145e2565b8280546144f690614e83565b90600052602060002090601f016020900481019282614518576000855561455e565b82601f1061453157805160ff191683800117855561455e565b8280016001018555821561455e579182015b8281111561455e578251825591602001919060010190614543565b5061456a9291506145e2565b5090565b82805461457a90614e83565b90600052602060002090601f01602090048101928261459c576000855561455e565b82601f106145b55782800160ff1982351617855561455e565b8280016001018555821561455e579182015b8281111561455e5782358255916020019190600101906145c7565b5b8082111561456a57600081556001016145e3565b803561ffff8116811461460957600080fd5b919050565b60008083601f84011261462057600080fd5b5081356001600160401b0381111561463757600080fd5b60208301915083602082850101111561464f57600080fd5b9250929050565b80356001600160401b038116811461460957600080fd5b6000806000806000806080878903121561468657600080fd5b61468f876145f7565b955060208701356001600160401b03808211156146ab57600080fd5b6146b78a838b0161460e565b90975095508591506146cb60408a01614656565b945060608901359150808211156146e157600080fd5b506146ee89828a0161460e565b979a9699509497509295939492505050565b60006020828403121561471257600080fd5b81356001600160e01b031981168114611d3b57600080fd5b60006020828403121561473c57600080fd5b611d3b826145f7565b6000806040838503121561475857600080fd5b614761836145f7565b946020939093013593505050565b6001600160a01b038116811461239857600080fd5b60008060006060848603121561479957600080fd5b83356147a48161476f565b92506147b2602085016145f7565b9150604084013590509250925092565b801515811461239857600080fd5b60008060008060008060a087890312156147e957600080fd5b6147f2876145f7565b955060208701359450604087013593506060870135614810816147c2565b925060808701356001600160401b0381111561482b57600080fd5b6146ee89828a0161460e565b60008060006040848603121561484c57600080fd5b614855846145f7565b925060208401356001600160401b0381111561487057600080fd5b61487c8682870161460e565b9497909650939450505050565b60006020828403121561489b57600080fd5b8135611d3b816147c2565b600080604083850312156148b957600080fd5b82356148c48161476f565b915060208301356148d4816147c2565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561491d5761491d6148df565b604052919050565b60006001600160401b0382111561493e5761493e6148df565b50601f01601f191660200190565b60008060006060848603121561496157600080fd5b61496a846145f7565b925060208401356001600160401b0381111561498557600080fd5b8401601f8101861361499657600080fd5b80356149a96149a482614925565b6148f5565b8181528760208385010111156149be57600080fd5b816020840160208301376000602083830101528094505050506149e360408501614656565b90509250925092565b600080600060608486031215614a0157600080fd5b8335614a0c8161476f565b92506020840135614a1c8161476f565b929592945050506040919091013590565b600060608284031215614a3f57600080fd5b50919050565b600080600080600060a08688031215614a5d57600080fd5b8535614a688161476f565b9450614a76602087016145f7565b9350604086013592506060860135915060808601356001600160401b03811115614a9f57600080fd5b614aab88828901614a2d565b9150509295509295909350565b60005b83811015614ad3578181015183820152602001614abb565b8381111561172f5750506000910152565b60008151808452614afc816020860160208601614ab8565b601f01601f19169290920160200192915050565b602081526000611d3b6020830184614ae4565b60008060008060008060008060e0898b031215614b3f57600080fd5b8835614b4a8161476f565b9750614b5860208a016145f7565b9650604089013595506060890135945060808901356001600160401b0380821115614b8257600080fd5b614b8e8c838d0161460e565b9096509450849150614ba260a08c01614656565b935060c08b0135915080821115614bb857600080fd5b50614bc58b828c01614a2d565b9150509295985092959890939650565b600060208284031215614be757600080fd5b8135611d3b8161476f565b60008060408385031215614c0557600080fd5b614c0e836145f7565b9150614c1c602084016145f7565b90509250929050565b600080600080600080600080600060e08a8c031215614c4357600080fd5b614c4c8a6145f7565b985060208a0135975060408a0135965060608a01356001600160401b0380821115614c7657600080fd5b614c828d838e0161460e565b9098509650869150614c9660808d01614656565b955060a08c01359150614ca8826147c2565b90935060c08b01359080821115614cbe57600080fd5b50614ccb8c828d0161460e565b915080935050809150509295985092959850929598565b600080600080600060808688031215614cfa57600080fd5b614d03866145f7565b9450614d11602087016145f7565b93506040860135925060608601356001600160401b03811115614d3357600080fd5b614d3f8882890161460e565b969995985093965092949392505050565b600080600060608486031215614d6557600080fd5b6147a4846145f7565b6000806000806000806000806000806101008b8d031215614d8e57600080fd5b614d978b6145f7565b995060208b01356001600160401b0380821115614db357600080fd5b614dbf8e838f0161460e565b909b509950899150614dd360408e01614656565b985060608d0135975060808d01359150614dec8261476f565b90955060a08c0135945060c08c01359080821115614e0957600080fd5b50614e168d828e0161460e565b9150809450508092505060e08b013590509295989b9194979a5092959850565b60008060008060808587031215614e4c57600080fd5b614e55856145f7565b9350614e63602086016145f7565b92506040850135614e738161476f565b9396929550929360600135925050565b600181811c90821680614e9757607f821691505b602082108103614a3f57634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b60208082526026908201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6040820152651b9d1c9858dd60d21b606082015260800190565b600060208284031215614f1f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614f4e57614f4e614f26565b500390565b60008219821115614f6657614f66614f26565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000612443604083018486614f6b565b6000808335601e19843603018112614fc957600080fd5b8301803591506001600160401b03821115614fe357600080fd5b60200191503681900382131561464f57600080fd5b6000825161500a818460208701614ab8565b9190910192915050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b600061ffff8088168352808716602084015250846040830152608060608301526140c5608083018486614f6b565b61ffff8916815260c06020820152600061508660c08301898b614f6b565b6001600160401b038816604084015286606084015285608084015282810360a08401526150b4818587614f6b565b9b9a5050505050505050505050565b6000602082840312156150d557600080fd5b81516001600160401b038111156150eb57600080fd5b8201601f810184136150fc57600080fd5b805161510a6149a482614925565b81815285602083850101111561511f57600080fd5b612efa826020830160208601614ab8565b61ffff8516815260806020820152600061514d6080830186614ae4565b6001600160401b038516604084015282810360608401526140c58185614ae4565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061519c90830186614ae4565b841515606084015282810360808401526151b68185614ae4565b98975050505050505050565b600080604083850312156151d557600080fd5b505080516020909101519092909150565b61ffff86168152608060208201526000615204608083018688614f6b565b6001600160401b0394909416604083015250606001529392505050565b61ffff8616815260a06020820152600061523e60a0830187614ae4565b6001600160401b0386166040840152828103606084015261525f8186614ae4565b905082810360808401526151b68185614ae4565b634e487b7160e01b600052601260045260246000fd5b60008261529857615298615273565b500490565b6000602082840312156152af57600080fd5b8151611d3b816147c2565b600061010061ffff8b1683528060208401526152d88184018b614ae4565b6001600160401b038a166040850152606084018990526001600160a01b038816608085015260a0840187905283810360c085015290506153188186614ae4565b9150508260e08301529998505050505050505050565b6060815260006153416060830186614ae4565b6001600160401b039490941660208301525060400152919050565b60008261536b5761536b615273565b500690565b61ffff8716815260c06020820152600061538d60c0830188614ae4565b828103604084015261539f8188614ae4565b6001600160a01b0387811660608601528616608085015283810360a085015290506153ca8185614ae4565b9998505050505050505050565b60ff60f81b8760f81b16815285600182015260006001600160401b0360c01b808760c01b166021840152856029840152808560c01b166049840152508251615426816051850160208701614ab8565b91909101605101979650505050505050565b600081600019048311821515161561545257615452614f26565b50029056fea264697066735822122002e85e39cd4c45156c727cd464d515ec143b5814676650286110a986cc477f2264736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106103b75760003560e01c80637dc0d1d0116101f2578063baf3292d1161010d578063df2a5b3b116100a0578063f2fde38b1161006f578063f2fde38b14610c52578063f5ecbdbc14610c72578063fc0c546a14610c92578063fdff235b14610cc557600080fd5b8063df2a5b3b14610bdd578063e6a20ae614610bfd578063eaffd49a14610c12578063eb8d72b714610c3257600080fd5b8063cc01e9b6116100dc578063cc01e9b614610b50578063cc7015ae14610b70578063d1deba1f14610b9d578063d708a46814610bb057600080fd5b8063baf3292d14610ae0578063c1e9132e14610b00578063c446183414610b1a578063cbed8b9c14610b3057600080fd5b806393a61d6c116101855780639f38369a116101545780639f38369a14610a4c578063a4c51df514610a6c578063a6c3d16514610a8c578063b353aaa714610aac57600080fd5b806393a61d6c1461097d578063950c8a74146109aa5780639b19251a146109ca5780639bdb9812146109fa57600080fd5b80638cfd8f5c116101c15780638cfd8f5c146108e05780638da5cb5b14610918578063904365671461093b5780639358928b1461096857600080fd5b80637dc0d1d01461083a5780638456cb591461087757806384e69c691461088c578063857749b0146108ac57600080fd5b80634c42899a116102e257806364aff9ec11610275578063715018a611610244578063715018a6146107ce5780637533d788146107da57806376203b48146108075780637adbf9731461081a57600080fd5b806364aff9ec1461075b57806366ad5c8a1461077b578063695ef6bf1461079b57806369c1e7b8146107ae57600080fd5b806353489d6c116102b157806353489d6c146106b457806353d6fd59146106d45780635b8c41e6146106f45780635c975abb1461074357600080fd5b80634c42899a146106135780634cec62561461063a5780634ed2c662146106675780634f4ba0f41461068757600080fd5b80632dbbec081161035a5780633f1f4fa4116103295780633f1f4fa41461059c5780633f4ba83a146105c957806342d65a8d146105de57806344770515146105fe57600080fd5b80632dbbec08146104ec578063365260b41461050c5780633c4ec39b146105415780633d8b38f61461057c57600080fd5b80630df37483116103965780630df374831461043357806310ddb13714610453578063182b4b89146104735780632488eec8146104cc57600080fd5b80621d3567146103bc57806301ffc9a7146103de57806307e0db1714610413575b600080fd5b3480156103c857600080fd5b506103dc6103d736600461466d565b610cf2565b005b3480156103ea57600080fd5b506103fe6103f9366004614700565b610ee4565b60405190151581526020015b60405180910390f35b34801561041f57600080fd5b506103dc61042e36600461472a565b610f1b565b34801561043f57600080fd5b506103dc61044e366004614745565b610fa4565b34801561045f57600080fd5b506103dc61046e36600461472a565b610fc3565b34801561047f57600080fd5b5061049361048e366004614784565b61101b565b6040805197151588526020880196909652948601939093526060850191909152608084015260a0830152151560c082015260e00161040a565b3480156104d857600080fd5b506103dc6104e7366004614745565b611191565b3480156104f857600080fd5b506103dc61050736600461472a565b611275565b34801561051857600080fd5b5061052c6105273660046147d0565b6112d4565b6040805192835260208301919091520161040a565b34801561054d57600080fd5b5061056e61055c36600461472a565b600d6020526000908152604090205481565b60405190815260200161040a565b34801561058857600080fd5b506103fe610597366004614837565b611329565b3480156105a857600080fd5b5061056e6105b736600461472a565b60036020526000908152604090205481565b3480156105d557600080fd5b506103dc6113f5565b3480156105ea57600080fd5b506103dc6105f9366004614837565b611407565b34801561060a57600080fd5b5061056e600081565b34801561061f57600080fd5b50610628600081565b60405160ff909116815260200161040a565b34801561064657600080fd5b5061056e61065536600461472a565b600a6020526000908152604090205481565b34801561067357600080fd5b506103dc610682366004614889565b61148d565b34801561069357600080fd5b5061056e6106a236600461472a565b60096020526000908152604090205481565b3480156106c057600080fd5b506103dc6106cf366004614745565b6114d2565b3480156106e057600080fd5b506103dc6106ef3660046148a6565b6115b6565b34801561070057600080fd5b5061056e61070f36600461494c565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561074f57600080fd5b5060005460ff166103fe565b34801561076757600080fd5b506103dc6107763660046149ec565b61162e565b34801561078757600080fd5b506103dc61079636600461466d565b611735565b6103dc6107a9366004614a45565b611811565b3480156107ba57600080fd5b506103dc6107c9366004614745565b61187c565b3480156103dc57600080fd5b3480156107e657600080fd5b506107fa6107f536600461472a565b611968565b60405161040a9190614b10565b6103dc610815366004614b23565b611a02565b34801561082657600080fd5b506103dc610835366004614bd5565b611a6e565b34801561084657600080fd5b5060075461085f9061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161040a565b34801561088357600080fd5b506103dc611ae6565b34801561089857600080fd5b506103dc6108a736600461494c565b611af6565b3480156108b857600080fd5b506106287f000000000000000000000000000000000000000000000000000000000000000081565b3480156108ec57600080fd5b5061056e6108fb366004614bf2565b600260209081526000928352604080842090915290825290205481565b34801561092457600080fd5b5060005461010090046001600160a01b031661085f565b34801561094757600080fd5b5061056e61095636600461472a565b600c6020526000908152604090205481565b34801561097457600080fd5b5061056e611ba3565b34801561098957600080fd5b5061056e61099836600461472a565b600b6020526000908152604090205481565b3480156109b657600080fd5b5060045461085f906001600160a01b031681565b3480156109d657600080fd5b506103fe6109e5366004614bd5565b60106020526000908152604090205460ff1681565b348015610a0657600080fd5b506103fe610a1536600461494c565b6006602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205460ff1681565b348015610a5857600080fd5b506107fa610a6736600461472a565b611c2c565b348015610a7857600080fd5b5061052c610a87366004614c25565b611d42565b348015610a9857600080fd5b506103dc610aa7366004614837565b611dd1565b348015610ab857600080fd5b5061085f7f000000000000000000000000000000000000000000000000000000000000000081565b348015610aec57600080fd5b506103dc610afb366004614bd5565b611e64565b348015610b0c57600080fd5b506007546103fe9060ff1681565b348015610b2657600080fd5b5061056e61271081565b348015610b3c57600080fd5b506103dc610b4b366004614ce2565b611eba565b348015610b5c57600080fd5b506103dc610b6b366004614745565b611f4f565b348015610b7c57600080fd5b5061056e610b8b36600461472a565b60086020526000908152604090205481565b6103dc610bab36600461466d565b61203b565b348015610bbc57600080fd5b5061056e610bcb36600461472a565b600e6020526000908152604090205481565b348015610be957600080fd5b506103dc610bf8366004614d50565b61213f565b348015610c0957600080fd5b50610628600181565b348015610c1e57600080fd5b506103dc610c2d366004614d6e565b6121a9565b348015610c3e57600080fd5b506103dc610c4d366004614837565b6122c8565b348015610c5e57600080fd5b506103dc610c6d366004614bd5565b612322565b348015610c7e57600080fd5b506107fa610c8d366004614e36565b61239b565b348015610c9e57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061085f565b348015610cd157600080fd5b5061056e610ce036600461472a565b600f6020526000908152604090205481565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610d6f5760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff861660009081526001602052604081208054610d8d90614e83565b80601f0160208091040260200160405190810160405280929190818152602001828054610db990614e83565b8015610e065780601f10610ddb57610100808354040283529160200191610e06565b820191906000526020600020905b815481529060010190602001808311610de957829003601f168201915b50505050509050805186869050148015610e21575060008151115b8015610e49575080516020820120604051610e3f9088908890614eb7565b6040518091039020145b610e655760405162461bcd60e51b8152600401610d6690614ec7565b610edb8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061244e92505050565b50505050505050565b60006001600160e01b03198216631f7ecdf760e01b1480610f1557506301ffc9a760e01b6001600160e01b03198316145b92915050565b610f236124c7565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610f8957600080fd5b505af1158015610f9d573d6000803e3d6000fd5b5050505050565b610fac6124c7565b61ffff909116600090815260036020526040902055565b610fcb6124c7565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610f6f565b6001600160a01b03838116600090815260106020908152604080832054815192830190915260075492938493849384938493849360ff909216928492909182916101009004166341976e097f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156110cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ef9190614f0d565b905290506110fd818a612527565b61ffff8b166000908152600b6020908152604080832054600a835281842054600884528285205460099094529190932054919a509098509196509094509250426201518061114b8583614f3c565b111561115c57859450809350611169565b6111668686614f53565b94505b828061118057508786111580156111805750868511155b985050509397509397509397909450565b6111996124c7565b61ffff821660009081526008602052604090205481101561120b5760405162461bcd60e51b815260206004820152602660248201527f4461696c79206c696d6974203c2073696e676c65207472616e73616374696f6e604482015265081b1a5b5a5d60d21b6064820152608401610d66565b61ffff82166000818152600960209081526040918290205482519384529083015281018290527f4dd31065e259d5284e44d1f9265710da72eafcf78dc925e3881189fc3b71f6939060600160405180910390a161ffff909116600090815260096020526040902055565b61127d6124c7565b61ffff81166000908152600160205260408120611299916144b0565b60405161ffff821681527f6d5075c81d4d9e75bec6052f4e44f58f8a8cf1327544addbbf015fb06f83bd37906020015b60405180910390a150565b60008061131a8888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061253f92505050565b91509150965096945050505050565b61ffff83166000908152600160205260408120805482919061134a90614e83565b80601f016020809104026020016040519081016040528092919081815260200182805461137690614e83565b80156113c35780601f10611398576101008083540402835291602001916113c3565b820191906000526020600020905b8154815290600101906020018083116113a657829003601f168201915b5050505050905083836040516113da929190614eb7565b60405180910390208180519060200120149150509392505050565b6113fd6124c7565b611405612633565b565b61140f6124c7565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d9061145f90869086908690600401614f94565b600060405180830381600087803b15801561147957600080fd5b505af1158015610edb573d6000803e3d6000fd5b6114956124c7565b6007805460ff19168215159081179091556040517fe628f01c6f4e6340598d3a2913390db68e8859379eebff349e170f2b16baed0090600090a250565b6114da6124c7565b61ffff821660009081526009602052604090205481111561154c5760405162461bcd60e51b815260206004820152602660248201527f53696e676c65207472616e73616374696f6e206c696d6974203e204461696c79604482015265081b1a5b5a5d60d21b6064820152608401610d66565b61ffff82166000818152600860209081526040918290205482519384529083015281018290527f7babeac42ccbb33537ee421fedc4db7b5f251b5d2a3fa5c0ff4b35b2d783be879060600160405180910390a161ffff909116600090815260086020526040902055565b6115be6124c7565b816001600160a01b03167ff6019ec0a78d156d249a1ec7579e2321f6ac7521d6e1d2eacf90ba4a184dcceb826040516115fb911515815260200190565b60405180910390a26001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b6116366124c7565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561167d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a19190614f0d565b9050808211156116ce5760405163cf47918160e01b81526004810183905260248101829052604401610d66565b826001600160a01b0316846001600160a01b03167f6d25be279134f4ecaa4770aff0c3d916d9e7c5ef37b65ed95dbdba411f5d54d58460405161171391815260200190565b60405180910390a361172f6001600160a01b0385168484612685565b50505050565b3330146117935760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610d66565b6118098686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152899350915087908790819084018382808284376000920191909152506126ed92505050565b505050505050565b611809858585856118256020870187614bd5565b6118356040880160208901614bd5565b6118426040890189614fb2565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061277492505050565b6118846124c7565b61ffff82166000908152600c60205260409020548110156118fe5760405162461bcd60e51b815260206004820152602e60248201527f4461696c79206c696d6974203c2073696e676c6520726563656976652074726160448201526d1b9cd858dd1a5bdb881b1a5b5a5d60921b6064820152608401610d66565b61ffff82166000818152600d60209081526040918290205482519384529083015281018290527f95dc51094cd27cf4ee3fd0dbb50cf96f8df1629c822f5434c4a34d7eb03c97249060600160405180910390a161ffff9091166000908152600d6020526040902055565b6001602052600090815260409020805461198190614e83565b80601f01602080910402602001604051908101604052809291908181526020018280546119ad90614e83565b80156119fa5780601f106119cf576101008083540402835291602001916119fa565b820191906000526020600020905b8154815290600101906020018083116119dd57829003601f168201915b505050505081565b60075460ff16611a545760405162461bcd60e51b815260206004820152601760248201527f73656e64416e6443616c6c2069732064697361626c65640000000000000000006044820152606401610d66565b611a64888888888888888861285c565b5050505050505050565b611a766124c7565b611a7f81612900565b6007546040516001600160a01b0380841692610100900416907f05cd89403c6bdeac21c2ff33de395121a31fa1bc2bf3adf4825f1f86e79969dd90600090a3600780546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b611aee6124c7565b611405612927565b611afe6124c7565b61ffff83166000908152600560205260408082209051611b1f908590614ff8565b9081526040805191829003602090810183206001600160401b038616600090815291522091909155611b52908390614ff8565b6040805191829003822061ffff861683526001600160401b0384166020840152917f48a980eea4ea1c540209e2f9f32a4c2edf51fab37b1d21f453868301ecb6e2ee910160405180910390a2505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c279190614f0d565b905090565b61ffff8116600090815260016020526040812080546060929190611c4f90614e83565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7b90614e83565b8015611cc85780601f10611c9d57610100808354040283529160200191611cc8565b820191906000526020600020905b815481529060010190602001808311611cab57829003601f168201915b505050505090508051600003611d205760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610d66565b611d3b600060148351611d339190614f3c565b839190612964565b9392505050565b600080611dbf8b8b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b81528e93508d9250908c908c9081908401838280828437600092019190915250612a7192505050565b91509150995099975050505050505050565b611dd96124c7565b818130604051602001611dee93929190615014565b60408051601f1981840301815291815261ffff85166000908152600160209081529190208251611e23939192909101906144ea565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611e5793929190614f94565b60405180910390a1505050565b611e6c6124c7565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b906020016112c9565b611ec26124c7565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611f16908890889088908890889060040161503a565b600060405180830381600087803b158015611f3057600080fd5b505af1158015611f44573d6000803e3d6000fd5b505050505050505050565b611f576124c7565b61ffff82166000908152600d6020526040902054811115611fd15760405162461bcd60e51b815260206004820152602e60248201527f73696e676c652072656365697665207472616e73616374696f6e206c696d697460448201526d080f8811185a5b1e481b1a5b5a5d60921b6064820152608401610d66565b61ffff82166000818152600c60209081526040918290205482519384529083015281018290527f2c42997a938a029910a78e7c28d762b349c28e70f3a89c1fbccbb1a46020b1599060600160405180910390a161ffff9091166000908152600c6020526040902055565b61ffff86166000908152600160205260408120805461205990614e83565b80601f016020809104026020016040519081016040528092919081815260200182805461208590614e83565b80156120d25780601f106120a7576101008083540402835291602001916120d2565b820191906000526020600020905b8154815290600101906020018083116120b557829003601f168201915b505050505090508051868690501480156120ed575060008151115b801561211557508051602082012060405161210b9088908890614eb7565b6040518091039020145b6121315760405162461bcd60e51b8152600401610d6690614ec7565b610edb878787878787612b33565b6121476124c7565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611e57565b3330146121f85760405162461bcd60e51b815260206004820152601f60248201527f4f4654436f72653a2063616c6c6572206d757374206265204f4654436f7265006044820152606401610d66565b612203308686612d49565b9350846001600160a01b03168a61ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf8660405161224591815260200190565b60405180910390a3604051633fe79aed60e11b81526001600160a01b03861690637fcf35da908390612289908e908e908e908e908e908d908d908d90600401615068565b600060405180830381600088803b1580156122a357600080fd5b5087f11580156122b7573d6000803e3d6000fd5b505050505050505050505050505050565b6122d06124c7565b61ffff831660009081526001602052604090206122ee90838361456e565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611e5793929190614f94565b61232a6124c7565b6001600160a01b03811661238f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d66565b61239881612f03565b50565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa15801561241b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261244391908101906150c3565b90505b949350505050565b6000806124b15a60966366ad5c8a60e01b898989896040516024016124769493929190615130565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190612f5c565b9150915081611809576118098686868685612fe6565b6000546001600160a01b036101009091041633146114055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d66565b6000806125348484613083565b9050612446816130b4565b600080600061258d87612551886130cc565b6040805160006020820152602181019390935260c09190911b6001600160c01b0319166041830152805160298184030181526049909201905290565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb10906125e4908b90309086908b908b9060040161516e565b6040805180830381865afa158015612600573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262491906151c2565b92509250509550959350505050565b61263b613152565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b0383166024820152604481018290526126e890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261319b565b505050565b60006126f98282613270565b905060ff81166127145761270f858585856132cc565b610f9d565b60001960ff82160161272c5761270f8585858561335c565b60405162461bcd60e51b815260206004820152601c60248201527f4f4654436f72653a20756e6b6e6f776e207061636b65742074797065000000006044820152606401610d66565b60006127828782848161356a565b61278b8561363f565b50905061279a8888888461367f565b9050600081116127e85760405162461bcd60e51b815260206004820152601960248201527813d19510dbdc994e88185b5bdd5b9d081d1bdbc81cdb585b1b603a1b6044820152606401610d66565b60006127f787612551846130cc565b9050612807888287878734613782565b86896001600160a01b03168961ffff167fd81fc9b8523134ed613870ed029d6170cbb73aa6a6bc311b9a642689fb9df59a8560405161284891815260200190565b60405180910390a450979650505050505050565b611f448888888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506128a99150506020890189614bd5565b6128b960408a0160208b01614bd5565b6128c660408b018b614fb2565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061392792505050565b6001600160a01b038116612398576040516342bcdf7f60e11b815260040160405180910390fd5b61292f613a1c565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126683390565b60608161297281601f614f53565b10156129b15760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610d66565b6129bb8284614f53565b845110156129ff5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610d66565b606082158015612a1e5760405191506000825260208201604052612a68565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612a57578051835260209283019201612a3f565b5050858452601f01601f1916604052505b50949350505050565b6000806000612a8b338a612a848b6130cc565b8a8a613a62565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090612ae2908d90309086908b908b9060040161516e565b6040805180830381865afa158015612afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2291906151c2565b925092505097509795505050505050565b61ffff86166000908152600560205260408082209051612b569088908890614eb7565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080612bd65760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610d66565b808383604051612be7929190614eb7565b604051809103902014612c465760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610d66565b61ffff87166000908152600560205260408082209051612c699089908990614eb7565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252612d01918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506126ed92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051612d389594939291906151e6565b60405180910390a150505050505050565b6000612d53613a1c565b6040516370a0823160e01b81526001600160a01b0384811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015612dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de29190614f0d565b9050306001600160a01b03861603612e2d57612e286001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585612685565b612e62565b612e626001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868686613aa3565b6040516370a0823160e01b81526001600160a01b03858116600483015282917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015612ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef09190614f0d565b612efa9190614f3c565b95945050505050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6000606060008060008661ffff166001600160401b03811115612f8157612f816148df565b6040519080825280601f01601f191660200182016040528015612fab576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115612fcd578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff168152602001908152602001600020856040516130179190614ff8565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c906130749087908790879087908790615221565b60405180910390a15050505050565b60408051602081019091526000815260405180602001604052806130ab856000015185613adb565b90529392505050565b8051600090610f1590670de0b6b3a764000090615289565b6000806130f97f000000000000000000000000000000000000000000000000000000000000000084615289565b90506001600160401b03811115610f155760405162461bcd60e51b815260206004820152601a60248201527f4f4654436f72653a20616d6f756e745344206f766572666c6f770000000000006044820152606401610d66565b60005460ff166114055760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610d66565b60006131f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ae79092919063ffffffff16565b9050805160001480613211575080806020019051810190613211919061529d565b6126e85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d66565b600061327d826001614f53565b835110156132c35760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610d66565b50016001015190565b6000806132d883613af6565b90925090506001600160a01b0382166132f15761dead91505b60006132fc82613b7b565b9050613309878483613bb0565b9050826001600160a01b03168761ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf8360405161334b91815260200190565b60405180910390a350505050505050565b600080600080600061336d86613c4f565b945094509450945094506000600660008b61ffff1661ffff168152602001908152602001600020896040516133a29190614ff8565b90815260408051602092819003830190206001600160401b038b166000908152925281205460ff1691506133d585613b7b565b905081613443576133e78b3083613bb0565b61ffff8c1660009081526006602052604090819020905191925060019161340f908d90614ff8565b90815260408051602092819003830190206001600160401b038d16600090815292529020805460ff19169115159190911790555b6001600160a01b0386163b61349a576040516001600160a01b03871681527f9aedf5fdba8716db3b6705ca00150643309995d4f818a249ed6dde6677e7792d9060200160405180910390a15050505050505061172f565b8a8a8a8a8a8a868a60008a6134b8578b6001600160401b03166134ba565b5a5b90506000806134ec5a609663eaffd49a60e01b8e8e8e8d8d8d8d8d6040516024016124769897969594939291906152ba565b915091508115613545578751602089012060405161ffff8d16907fb8890edbfc1c74692f527444645f95489c3703cc2df42e4a366f5d06fa6cd88490613537908e908e90869061532e565b60405180910390a250613552565b6135528b8b8b8b85612fe6565b50505050505050505050505050505050505050505050565b600061357583613d06565b61ffff808716600090815260026020908152604080832093891683529290522054909150806135e65760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610d66565b6135f08382614f53565b8210156118095760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610d66565b60008061366c7f00000000000000000000000000000000000000000000000000000000000000008461535c565b90506136788184614f3c565b9150915091565b6000613689613a1c565b6001600160a01b03851633146136ec5760405162461bcd60e51b815260206004820152602260248201527f50726f78794f46543a206f776e6572206973206e6f742073656e642063616c6c60448201526132b960f11b6064820152608401610d66565b6136f7858584613d62565b604051632770a7eb60e21b81526001600160a01b038681166004830152602482018490527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac90604401600060405180830381600087803b15801561376157600080fd5b505af1158015613775573d6000803e3d6000fd5b5093979650505050505050565b61ffff8616600090815260016020526040812080546137a090614e83565b80601f01602080910402602001604051908101604052809291908181526020018280546137cc90614e83565b80156138195780601f106137ee57610100808354040283529160200191613819565b820191906000526020600020905b8154815290600101906020018083116137fc57829003601f168201915b50505050509050805160000361388a5760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610d66565b613895878751613f84565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c58031009084906138ec908b9086908c908c908c908c90600401615370565b6000604051808303818588803b15801561390557600080fd5b505af1158015613919573d6000803e3d6000fd5b505050505050505050505050565b600061393f896001846001600160401b03891661356a565b6139488761363f565b5090506139578a8a8a8461367f565b9050600081116139a55760405162461bcd60e51b815260206004820152601960248201527813d19510dbdc994e88185b5bdd5b9d081d1bdbc81cdb585b1b603a1b6044820152606401610d66565b60006139b5338a612a84856130cc565b90506139c58a8287878734613782565b888b6001600160a01b03168b61ffff167fd81fc9b8523134ed613870ed029d6170cbb73aa6a6bc311b9a642689fb9df59a85604051613a0691815260200190565b60405180910390a4509998505050505050505050565b60005460ff16156114055760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610d66565b6060600185856001600160a01b0389168587604051602001613a89969594939291906153d7565b604051602081830303815290604052905095945050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261172f9085906323b872dd60e01b906084016126b1565b6000611d3b8284615438565b60606124468484600085613ff5565b60008080613b048482613270565b60ff16148015613b15575082516029145b613b5c5760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b6044820152606401610d66565b613b6783600d6140d0565b9150613b74836021614135565b9050915091565b6000610f157f00000000000000000000000000000000000000000000000000000000000000006001600160401b038416615438565b6000613bba613a1c565b613bc5838584614192565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b158015613c2f57600080fd5b505af1158015613c43573d6000803e3d6000fd5b50939695505050505050565b600080806060816001613c628783613270565b60ff1614613cad5760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b6044820152606401610d66565b613cb886600d6140d0565b9350613cc5866021614135565b9250613cd28660296143b4565b9450613cdf866049614135565b9050613cfb6051808851613cf39190614f3c565b889190612964565b915091939590929450565b6000602282511015613d5a5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610d66565b506022015190565b6001600160a01b03831660009081526010602052604090205460ff168015613d8a5750505050565b60408051602081019091526007546000918291819061010090046001600160a01b03166341976e097f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e3b9190614f0d565b90529050613e498185612527565b61ffff86166000908152600b6020908152604080832054600a835281842054600884528285205460099094529190932054939550429390919081871115613ed25760405162461bcd60e51b815260206004820152601f60248201527f53696e676c65205472616e73616374696f6e204c696d697420457863656564006044820152606401610d66565b62015180613ee08587614f3c565b1115613f045761ffff8a166000908152600b60205260409020859055869250613f11565b613f0e8784614f53565b92505b80831115613f615760405162461bcd60e51b815260206004820152601e60248201527f4461696c79205472616e73616374696f6e204c696d69742045786365656400006044820152606401610d66565b505061ffff9097166000908152600a602052604090209690965550505050505050565b61ffff821660009081526003602052604081205490819003613fa557506127105b808211156126e85760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c617267656044820152606401610d66565b6060824710156140565760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d66565b600080866001600160a01b031685876040516140729190614ff8565b60006040518083038185875af1925050503d80600081146140af576040519150601f19603f3d011682016040523d82523d6000602084013e6140b4565b606091505b50915091506140c587838387614412565b979650505050505050565b60006140dd826014614f53565b835110156141255760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610d66565b500160200151600160601b900490565b6000614142826008614f53565b835110156141895760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b6044820152606401610d66565b50016008015190565b6001600160a01b03831660009081526010602052604090205460ff1680156141ba5750505050565b60408051602081019091526007546000918291819061010090046001600160a01b03166341976e097f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015614247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061426b9190614f0d565b905290506142798185612527565b61ffff86166000908152600f6020908152604080832054600e835281842054600c845282852054600d90945291909320549395504293909190818711156143025760405162461bcd60e51b815260206004820152601f60248201527f53696e676c65205472616e73616374696f6e204c696d697420457863656564006044820152606401610d66565b620151806143108587614f3c565b11156143345761ffff8a166000908152600f60205260409020859055869250614341565b61433e8784614f53565b92505b808311156143915760405162461bcd60e51b815260206004820152601e60248201527f4461696c79205472616e73616374696f6e204c696d69742045786365656400006044820152606401610d66565b505061ffff9097166000908152600e602052604090209690965550505050505050565b60006143c1826020614f53565b835110156144095760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b6044820152606401610d66565b50016020015190565b6060831561448157825160000361447a576001600160a01b0385163b61447a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d66565b5081612446565b61244683838151156144965781518083602001fd5b8060405162461bcd60e51b8152600401610d669190614b10565b5080546144bc90614e83565b6000825580601f106144cc575050565b601f01602090049060005260206000209081019061239891906145e2565b8280546144f690614e83565b90600052602060002090601f016020900481019282614518576000855561455e565b82601f1061453157805160ff191683800117855561455e565b8280016001018555821561455e579182015b8281111561455e578251825591602001919060010190614543565b5061456a9291506145e2565b5090565b82805461457a90614e83565b90600052602060002090601f01602090048101928261459c576000855561455e565b82601f106145b55782800160ff1982351617855561455e565b8280016001018555821561455e579182015b8281111561455e5782358255916020019190600101906145c7565b5b8082111561456a57600081556001016145e3565b803561ffff8116811461460957600080fd5b919050565b60008083601f84011261462057600080fd5b5081356001600160401b0381111561463757600080fd5b60208301915083602082850101111561464f57600080fd5b9250929050565b80356001600160401b038116811461460957600080fd5b6000806000806000806080878903121561468657600080fd5b61468f876145f7565b955060208701356001600160401b03808211156146ab57600080fd5b6146b78a838b0161460e565b90975095508591506146cb60408a01614656565b945060608901359150808211156146e157600080fd5b506146ee89828a0161460e565b979a9699509497509295939492505050565b60006020828403121561471257600080fd5b81356001600160e01b031981168114611d3b57600080fd5b60006020828403121561473c57600080fd5b611d3b826145f7565b6000806040838503121561475857600080fd5b614761836145f7565b946020939093013593505050565b6001600160a01b038116811461239857600080fd5b60008060006060848603121561479957600080fd5b83356147a48161476f565b92506147b2602085016145f7565b9150604084013590509250925092565b801515811461239857600080fd5b60008060008060008060a087890312156147e957600080fd5b6147f2876145f7565b955060208701359450604087013593506060870135614810816147c2565b925060808701356001600160401b0381111561482b57600080fd5b6146ee89828a0161460e565b60008060006040848603121561484c57600080fd5b614855846145f7565b925060208401356001600160401b0381111561487057600080fd5b61487c8682870161460e565b9497909650939450505050565b60006020828403121561489b57600080fd5b8135611d3b816147c2565b600080604083850312156148b957600080fd5b82356148c48161476f565b915060208301356148d4816147c2565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561491d5761491d6148df565b604052919050565b60006001600160401b0382111561493e5761493e6148df565b50601f01601f191660200190565b60008060006060848603121561496157600080fd5b61496a846145f7565b925060208401356001600160401b0381111561498557600080fd5b8401601f8101861361499657600080fd5b80356149a96149a482614925565b6148f5565b8181528760208385010111156149be57600080fd5b816020840160208301376000602083830101528094505050506149e360408501614656565b90509250925092565b600080600060608486031215614a0157600080fd5b8335614a0c8161476f565b92506020840135614a1c8161476f565b929592945050506040919091013590565b600060608284031215614a3f57600080fd5b50919050565b600080600080600060a08688031215614a5d57600080fd5b8535614a688161476f565b9450614a76602087016145f7565b9350604086013592506060860135915060808601356001600160401b03811115614a9f57600080fd5b614aab88828901614a2d565b9150509295509295909350565b60005b83811015614ad3578181015183820152602001614abb565b8381111561172f5750506000910152565b60008151808452614afc816020860160208601614ab8565b601f01601f19169290920160200192915050565b602081526000611d3b6020830184614ae4565b60008060008060008060008060e0898b031215614b3f57600080fd5b8835614b4a8161476f565b9750614b5860208a016145f7565b9650604089013595506060890135945060808901356001600160401b0380821115614b8257600080fd5b614b8e8c838d0161460e565b9096509450849150614ba260a08c01614656565b935060c08b0135915080821115614bb857600080fd5b50614bc58b828c01614a2d565b9150509295985092959890939650565b600060208284031215614be757600080fd5b8135611d3b8161476f565b60008060408385031215614c0557600080fd5b614c0e836145f7565b9150614c1c602084016145f7565b90509250929050565b600080600080600080600080600060e08a8c031215614c4357600080fd5b614c4c8a6145f7565b985060208a0135975060408a0135965060608a01356001600160401b0380821115614c7657600080fd5b614c828d838e0161460e565b9098509650869150614c9660808d01614656565b955060a08c01359150614ca8826147c2565b90935060c08b01359080821115614cbe57600080fd5b50614ccb8c828d0161460e565b915080935050809150509295985092959850929598565b600080600080600060808688031215614cfa57600080fd5b614d03866145f7565b9450614d11602087016145f7565b93506040860135925060608601356001600160401b03811115614d3357600080fd5b614d3f8882890161460e565b969995985093965092949392505050565b600080600060608486031215614d6557600080fd5b6147a4846145f7565b6000806000806000806000806000806101008b8d031215614d8e57600080fd5b614d978b6145f7565b995060208b01356001600160401b0380821115614db357600080fd5b614dbf8e838f0161460e565b909b509950899150614dd360408e01614656565b985060608d0135975060808d01359150614dec8261476f565b90955060a08c0135945060c08c01359080821115614e0957600080fd5b50614e168d828e0161460e565b9150809450508092505060e08b013590509295989b9194979a5092959850565b60008060008060808587031215614e4c57600080fd5b614e55856145f7565b9350614e63602086016145f7565b92506040850135614e738161476f565b9396929550929360600135925050565b600181811c90821680614e9757607f821691505b602082108103614a3f57634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b60208082526026908201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6040820152651b9d1c9858dd60d21b606082015260800190565b600060208284031215614f1f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614f4e57614f4e614f26565b500390565b60008219821115614f6657614f66614f26565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000612443604083018486614f6b565b6000808335601e19843603018112614fc957600080fd5b8301803591506001600160401b03821115614fe357600080fd5b60200191503681900382131561464f57600080fd5b6000825161500a818460208701614ab8565b9190910192915050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b600061ffff8088168352808716602084015250846040830152608060608301526140c5608083018486614f6b565b61ffff8916815260c06020820152600061508660c08301898b614f6b565b6001600160401b038816604084015286606084015285608084015282810360a08401526150b4818587614f6b565b9b9a5050505050505050505050565b6000602082840312156150d557600080fd5b81516001600160401b038111156150eb57600080fd5b8201601f810184136150fc57600080fd5b805161510a6149a482614925565b81815285602083850101111561511f57600080fd5b612efa826020830160208601614ab8565b61ffff8516815260806020820152600061514d6080830186614ae4565b6001600160401b038516604084015282810360608401526140c58185614ae4565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061519c90830186614ae4565b841515606084015282810360808401526151b68185614ae4565b98975050505050505050565b600080604083850312156151d557600080fd5b505080516020909101519092909150565b61ffff86168152608060208201526000615204608083018688614f6b565b6001600160401b0394909416604083015250606001529392505050565b61ffff8616815260a06020820152600061523e60a0830187614ae4565b6001600160401b0386166040840152828103606084015261525f8186614ae4565b905082810360808401526151b68185614ae4565b634e487b7160e01b600052601260045260246000fd5b60008261529857615298615273565b500490565b6000602082840312156152af57600080fd5b8151611d3b816147c2565b600061010061ffff8b1683528060208401526152d88184018b614ae4565b6001600160401b038a166040850152606084018990526001600160a01b038816608085015260a0840187905283810360c085015290506153188186614ae4565b9150508260e08301529998505050505050505050565b6060815260006153416060830186614ae4565b6001600160401b039490941660208301525060400152919050565b60008261536b5761536b615273565b500690565b61ffff8716815260c06020820152600061538d60c0830188614ae4565b828103604084015261539f8188614ae4565b6001600160a01b0387811660608601528616608085015283810360a085015290506153ca8185614ae4565b9998505050505050505050565b60ff60f81b8760f81b16815285600182015260006001600160401b0360c01b808760c01b166021840152856029840152808560c01b166049840152508251615426816051850160208701614ab8565b91909101605101979650505050505050565b600081600019048311821515161561545257615452614f26565b50029056fea264697066735822122002e85e39cd4c45156c727cd464d515ec143b5814676650286110a986cc477f2264736f6c634300080d0033",
  "devdoc": {
    "author": "Venus",
    "kind": "dev",
    "methods": {
      "circulatingSupply()": {
        "returns": {
          "_0": "total circulating supply of the token on the destination chain."
        }
      },
      "dropFailedMessage(uint16,bytes,uint64)": {
        "custom:access": "Only owner",
        "custom:event": "Emits DropFailedMessage on clearance of failed message.",
        "params": {
          "nonce_": "Nonce_ of the transaction",
          "srcAddress_": "Address of source followed by current bridge address",
          "srcChainId_": "Chain id of source"
        }
      },
      "estimateSendFee(uint16,bytes32,uint256,bool,bytes)": {
        "details": "estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _amount - amount of the tokens to transfer _useZro - indicates to use zro to pay L0 fees _adapterParam - flexible bytes array to indicate messaging adapter services in L0"
      },
      "isEligibleToSend(address,uint16,uint256)": {
        "details": "This external view function assesses whether the specified sender is eligible to transfer the given amount      to the specified destination chain. It considers factors such as whitelisting, transaction limits, and a 24-hour window.",
        "params": {
          "amount_": "The quantity of tokens to be transferred.",
          "dstChainId_": "Indicates destination chain.",
          "from_": "The sender's address initiating the transfer."
        },
        "returns": {
          "amountInUsd": "The equivalent amount in USD based on the oracle price.",
          "eligibleToSend": "A boolean indicating whether the sender is eligible to transfer the tokens.",
          "isWhiteListedUser": "A boolean indicating whether the sender is whitelisted.",
          "last24HourWindowStart": "The timestamp when the current 24-hour window started.",
          "maxDailyLimit": "The maximum daily limit for transactions.",
          "maxSingleTransactionLimit": "The maximum limit for a single transaction.",
          "transferredInWindow": "The total amount transferred in the current 24-hour window."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "custom:access": "Only owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeTrustedRemote(uint16)": {
        "custom:access": "Only owner.",
        "custom:event": "Emits TrustedRemoteRemoved once chain id is removed from trusted remote.",
        "params": {
          "remoteChainId_": "The chain's id corresponds to setting the trusted remote to empty."
        }
      },
      "sendAndCall(address,uint16,bytes32,uint256,bytes,uint64,(address,address,bytes))": {
        "details": "This internal override function enables the contract to send tokens and invoke calls on the specified      destination chain. It checks whether the sendAndCall feature is enabled before proceeding with the transfer.",
        "params": {
          "amount_": "Amount of tokens that will be transferred.",
          "callparams_": "Additional parameters, including refund address, ZRO payment address,                   and adapter params.",
          "dstChainId_": "Destination chain id on which tokens will be send.",
          "dstGasForCall_": "The amount of gas allocated for the call on the destination chain.",
          "from_": "Address from which tokens will be debited.",
          "payload_": "Additional data payload for the call on the destination chain.",
          "toAddress_": "Address on which tokens will be credited on destination chain."
        }
      },
      "sendFrom(address,uint16,bytes32,uint256,(address,address,bytes))": {
        "details": "send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from` `_from` the owner of token `_dstChainId` the destination chain identifier `_toAddress` can be any size depending on the `dstChainId`. `_amount` the quantity of tokens in wei `_refundAddress` the address LayerZero refunds if too much message fee is sent `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services"
      },
      "setMaxDailyLimit(uint16,uint256)": {
        "custom:access": "Only owner.",
        "custom:event": "Emits setMaxDailyLimit with old and new limit associated with chain id.",
        "params": {
          "chainId_": "Destination chain id.",
          "limit_": "Amount in USD(scaled with 18 decimals)."
        }
      },
      "setMaxDailyReceiveLimit(uint16,uint256)": {
        "custom:access": "Only owner.",
        "custom:event": "Emits setMaxDailyReceiveLimit with old and new limit associated with chain id.",
        "params": {
          "chainId_": "The destination chain ID.",
          "limit_": "The new maximum daily limit in USD(scaled with 18 decimals)."
        }
      },
      "setMaxSingleReceiveTransactionLimit(uint16,uint256)": {
        "custom:access": "Only owner.",
        "custom:event": "Emits setMaxSingleReceiveTransactionLimit with old and new limit associated with chain id.",
        "params": {
          "chainId_": "The destination chain ID.",
          "limit_": "The new maximum limit in USD(scaled with 18 decimals)."
        }
      },
      "setMaxSingleTransactionLimit(uint16,uint256)": {
        "custom:access": "Only owner.",
        "custom:event": "Emits SetMaxSingleTransactionLimit with old and new limit associated with chain id.",
        "params": {
          "chainId_": "Destination chain id.",
          "limit_": "Amount in USD(scaled with 18 decimals)."
        }
      },
      "setOracle(address)": {
        "custom:access": "Only owner.",
        "custom:event": "Emits OracleChanged with old and new oracle address.",
        "details": "Reverts if the new address is zero.",
        "params": {
          "oracleAddress_": "The new address of the ResilientOracle contract."
        }
      },
      "setWhitelist(address,bool)": {
        "custom:access": "Only owner.",
        "custom:event": "Emits setWhitelist.",
        "params": {
          "user_": "Address to be add in whitelist.",
          "val_": "Boolean to be set (true for user_ address is whitelisted)."
        }
      },
      "sweepToken(address,address,uint256)": {
        "custom:access": "Only Owner",
        "custom:error": "Throw InsufficientBalance if amount_ is greater than the available balance of the token in the contract",
        "custom:event": "Emits SweepToken event",
        "params": {
          "amount_": "The amount of tokens needs to transfer",
          "to_": "The address of the recipient",
          "token_": "The address of the ERC-20 token to sweep"
        }
      },
      "token()": {
        "returns": {
          "_0": "Address of the inner token of this bridge."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "custom:access": "Only owner."
      },
      "updateSendAndCallEnabled(bool)": {
        "params": {
          "enabled_": "Boolean indicating whether the sendAndCall function should be enabled or disabled."
        }
      }
    },
    "title": "XVSProxyOFTDest",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InsufficientBalance(uint256,uint256)": [
        {
          "notice": "Error thrown when this contract balance is less than sweep amount"
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "events": {
      "DropFailedMessage(uint16,bytes,uint64)": {
        "notice": "Emits when stored message dropped without successful retrying."
      },
      "InnerTokenAdded(address)": {
        "notice": "Event emitted when inner token set successfully."
      },
      "OracleChanged(address,address)": {
        "notice": "Event emitted when oracle is modified."
      },
      "SetMaxDailyLimit(uint16,uint256,uint256)": {
        "notice": "Emitted when the maximum daily limit of transactions from local chain is modified."
      },
      "SetMaxDailyReceiveLimit(uint16,uint256,uint256)": {
        "notice": "Emitted when the maximum daily limit for receiving transactions from remote chain is modified."
      },
      "SetMaxSingleReceiveTransactionLimit(uint16,uint256,uint256)": {
        "notice": "Emitted when the maximum limit for a single receive transaction from remote chain is modified."
      },
      "SetMaxSingleTransactionLimit(uint16,uint256,uint256)": {
        "notice": "Emitted when the maximum limit for a single transaction from local chain is modified."
      },
      "SetWhitelist(address,bool)": {
        "notice": "Emitted when address is added to whitelist."
      },
      "SweepToken(address,address,uint256)": {
        "notice": "Emitted on sweep token success"
      },
      "TrustedRemoteRemoved(uint16)": {
        "notice": "Event emitted when trusted remote sets to empty."
      },
      "UpdateSendAndCallEnabled(bool)": {
        "notice": "Event emitted when SendAndCallEnabled updated successfully."
      }
    },
    "kind": "user",
    "methods": {
      "chainIdToLast24HourReceiveWindowStart(uint16)": {
        "notice": "Timestamp when the last 24-hour window started from remote chain."
      },
      "chainIdToLast24HourReceived(uint16)": {
        "notice": "Total received amount in USD(scaled with 18 decimals) within the last 24-hour window from remote chain."
      },
      "chainIdToLast24HourTransferred(uint16)": {
        "notice": "Total sent amount in USD(scaled with 18 decimals) within the last 24-hour window from local chain."
      },
      "chainIdToLast24HourWindowStart(uint16)": {
        "notice": "Timestamp when the last 24-hour window started from local chain."
      },
      "chainIdToMaxDailyLimit(uint16)": {
        "notice": "Maximum daily limit for transactions in USD(scaled with 18 decimals) from local chain."
      },
      "chainIdToMaxDailyReceiveLimit(uint16)": {
        "notice": "Maximum daily limit for receiving transactions in USD(scaled with 18 decimals) from remote chain."
      },
      "chainIdToMaxSingleReceiveTransactionLimit(uint16)": {
        "notice": "Maximum limit for a single receive transaction in USD(scaled with 18 decimals) from remote chain."
      },
      "chainIdToMaxSingleTransactionLimit(uint16)": {
        "notice": "Maximum limit for a single transaction in USD(scaled with 18 decimals) from local chain."
      },
      "circulatingSupply()": {
        "notice": "Returns the total circulating supply of the token on the destination chain i.e (total supply)."
      },
      "dropFailedMessage(uint16,bytes,uint64)": {
        "notice": "Clear failed messages from the storage."
      },
      "isEligibleToSend(address,uint16,uint256)": {
        "notice": "Checks the eligibility of a sender to initiate a cross-chain token transfer."
      },
      "oracle()": {
        "notice": "The address of ResilientOracle contract wrapped in its interface."
      },
      "pause()": {
        "notice": "Triggers stopped state of the bridge."
      },
      "removeTrustedRemote(uint16)": {
        "notice": "Remove trusted remote from storage."
      },
      "renounceOwnership()": {
        "notice": "Empty implementation of renounce ownership to avoid any mishappening."
      },
      "sendAndCall(address,uint16,bytes32,uint256,bytes,uint64,(address,address,bytes))": {
        "notice": "Initiates a cross-chain token transfer and triggers a call on the destination chain."
      },
      "setMaxDailyLimit(uint16,uint256)": {
        "notice": "Sets the limit of daily (24 Hour) transactions amount."
      },
      "setMaxDailyReceiveLimit(uint16,uint256)": {
        "notice": "Sets the maximum daily limit for receiving transactions."
      },
      "setMaxSingleReceiveTransactionLimit(uint16,uint256)": {
        "notice": "Sets the maximum limit for a single receive transaction."
      },
      "setMaxSingleTransactionLimit(uint16,uint256)": {
        "notice": "Sets the limit of single transaction amount."
      },
      "setOracle(address)": {
        "notice": "Set the address of the ResilientOracle contract."
      },
      "setWhitelist(address,bool)": {
        "notice": "Sets the whitelist address to skip checks on transaction limit."
      },
      "sweepToken(address,address,uint256)": {
        "notice": "A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to user"
      },
      "token()": {
        "notice": "Return's the address of the inner token of this bridge."
      },
      "unpause()": {
        "notice": "Triggers resume state of the bridge."
      },
      "updateSendAndCallEnabled(bool)": {
        "notice": "It enables or disables sendAndCall functionality for the bridge."
      },
      "whitelist(address)": {
        "notice": "Address on which cap check and bound limit is not applicable."
      }
    },
    "notice": "XVSProxyOFTDest contract builds upon the functionality of its parent contract, BaseXVSProxyOFT, and focuses on managing token transfers to the destination chain. It provides functions to check eligibility and perform the actual token transfers while maintaining strict access controls and pausing mechanisms.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5506,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5383,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 455,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 461,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 465,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "payloadSizeLimitLookup",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 467,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "precrime",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 997,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "failedMessages",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 3161,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "creditedPackets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool)))"
      },
      {
        "astId": 9369,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "sendAndCallEnabled",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 9373,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "oracle",
        "offset": 1,
        "slot": "7",
        "type": "t_contract(ResilientOracleInterface)8694"
      },
      {
        "astId": 9378,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "chainIdToMaxSingleTransactionLimit",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9383,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "chainIdToMaxDailyLimit",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9388,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "chainIdToLast24HourTransferred",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9393,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "chainIdToLast24HourWindowStart",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9398,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "chainIdToMaxSingleReceiveTransactionLimit",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9403,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "chainIdToMaxDailyReceiveLimit",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9408,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "chainIdToLast24HourReceived",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9413,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "chainIdToLast24HourReceiveWindowStart",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9418,
        "contract": "contracts/Bridge/XVSProxyOFTDest.sol:XVSProxyOFTDest",
        "label": "whitelist",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ResilientOracleInterface)8694": {
        "encoding": "inplace",
        "label": "contract ResilientOracleInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bool)"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool))"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
